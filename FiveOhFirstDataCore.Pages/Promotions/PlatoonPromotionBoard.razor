@inject IAuthorizationService _auth

<CascadingValue Value="CanPromote" Name="CanPromote">
    <CascadingValue Value="CanPromoteValues">
        <CascadingValue Value="Airborne ? PromotionBoardLevel.Company : PromotionBoardLevel.Platoon">
        @if(Troopers is not null)
        {
            <PendingPromotionsListing ActiveTroopers="Troopers" />

            <EligibleForPromotionListing ActiveTroopers="Troopers" />
        }
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public PlatoonData? Platoon { get; set; }
    [Parameter]
    public ZetaSectionData? Zeta { get; set; }
    [Parameter]
    public RazorSquadronData? Squadron { get; set; }
    [Parameter]
    public WardenData? Warden { get; set; }
    [Parameter]
    public int Slot { get; set; } = -1;

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    [CascadingParameter(Name = "Airborne")]
    public bool Airborne { get; set; } = false;

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private HashSet<int> CanPromoteValues { get; set; } = new();

    private PromotionType PromoType = PromotionType.Default;

    private void BuildTrooperList()
    {
        Troopers = new();
        if (Platoon is not null)
        {
            if (Platoon.Commander is not null)
                Troopers.Add(Platoon.Commander);
            if (Platoon.SergeantMajor is not null)
                Troopers.Add(Platoon.SergeantMajor);
            if (Platoon.ARC is not null)
                Troopers.Add(Platoon.ARC);
            if (Platoon.Medic is not null)
                Troopers.Add(Platoon.Medic);
            if (Platoon.RT is not null)
                Troopers.Add(Platoon.RT);

            foreach (var squad in Platoon.Squads)
            {
                if (squad.Lead is not null)
                    Troopers.Add(squad.Lead);
                if (squad.RT is not null)
                    Troopers.Add(squad.RT);
                if (squad.ARC is not null)
                    Troopers.Add(squad.ARC);

                foreach (var t in squad.Teams)
                {
                    if (t.Lead is not null)
                        Troopers.Add(t.Lead);
                    if (t.Medic is not null)
                        Troopers.Add(t.Medic);

                    Troopers.AddRange(t.Troopers.Where(x => x != null));
                }

                Troopers.AddRange(squad.AdditionalTroopers);
            }
        }
        else if (Zeta is not null)
        {
            if(Zeta.Commander is not null)
                Troopers.Add(Zeta.Commander);
            if(Zeta.Subordinate is not null)
                Troopers.Add(Zeta.Subordinate);
            
            foreach(var s in Zeta.Squads)
            {
                if (s.SquadLeader is not null)
                    Troopers.Add(s.SquadLeader);
                if (s.Leader is not null)
                    Troopers.Add(s.Leader);
                if (s.RT is not null)
                    Troopers.Add(s.RT);
                if (s.Medic is not null)
                    Troopers.Add(s.Medic);
                foreach (var t in s.Troopers)
                    if (t is not null)
                        Troopers.Add(t);
            }
        }
        else if (Squadron is not null)
        {
            if (Squadron.SubCommander is not null)
                Troopers.Add(Squadron.SubCommander);

            foreach (var flight in Squadron.Flights)
            {
                if (flight.FlightLeader is not null)
                    Troopers.Add(flight.FlightLeader);
                if (flight.SectionLeader is not null)
                    Troopers.Add(flight.SectionLeader);
                if (flight.Charlie is not null)
                    Troopers.Add(flight.Charlie);
                if (flight.Delta is not null)
                    Troopers.Add(flight.Delta);
                if (flight.Echo is not null)
                    Troopers.AddRange(flight.Echo.Where(x => x is not null));
            }
        }
        else if (Warden is not null)
        {
            if (Warden.Chief is not null)
                Troopers.Add(Warden.Chief);

            foreach (var flight in Warden.Flights)
            {
                if (flight.FlightLead is not null)
                    Troopers.Add(flight.FlightLead);
                foreach (var section in flight.Sections)
                {
                    if (section.SectionLeader is not null)
                        Troopers.Add(section.SectionLeader);
                    if (section.Charlie is not null)
                        Troopers.Add(section.Charlie);
                    if (section.Delta is not null)
                        Troopers.Add(section.Delta);
                    if (section.Echo is not null)
                        Troopers.Add(section.Echo);
                }

            }
        }

        switch(PromoType)
        {
            case PromotionType.Default:
                CanPromoteValues = Troopers.ToHashSet(x => x.Id);
                break;
            case PromotionType.RTO:
                CanPromoteValues = Troopers.AsQueryable()
                    .Where(x => x.Role == Role.RTO)
                    .ToHashSet(x => x.Id);
                break;
            case PromotionType.Medic:
                CanPromoteValues = Troopers.AsQueryable()
                    .Where(x => x.Role == Role.Medic)
                    .ToHashSet(x => x.Id);
                break;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded
            || user.HasClaim("Promotion.Platoon", Slot.ToString());

        if (Platoon is not null)
        {
            CanPromote = manager
                || (Platoon?.Commander?.Id ?? 0) == CurrentUser?.Id
                || (Platoon?.SergeantMajor?.Id ?? 0) == CurrentUser?.Id;

            if (!CanPromote)
            {
                if ((Platoon?.RT?.Id ?? 0) == CurrentUser?.Id)
                {
                    CanPromote = true;
                    PromoType = PromotionType.RTO;
                }
                else if ((Platoon?.Medic?.Id ?? 0) == CurrentUser?.Id)
                {
                    CanPromote = true;
                    PromoType = PromotionType.Medic;
                }
            }
        }
        else if (Zeta is not null)
        {
            CanPromote = manager
                || (Zeta.Commander?.Id ?? 0) == CurrentUser?.Id
                || (Zeta.Subordinate?.Id ?? 0) == CurrentUser?.Id;
        }
        else if (Squadron is not null)
        {
            CanPromote = manager 
                || (Squadron?.Commander?.Id ?? 0) == CurrentUser?.Id
                || (Squadron?.SubCommander?.Id ?? 0) == CurrentUser?.Id;
        }
        else if (Warden is not null)
        {
            CanPromote = manager
                || (Warden?.Master?.Id ?? 0) == CurrentUser?.Id
                || (Warden?.Chief?.Id ?? 0) == CurrentUser?.Id;
        }

        BuildTrooperList();
    }
}
