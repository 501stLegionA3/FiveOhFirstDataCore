@inject IAuthorizationService _auth

<h3>PlatoonPromotionBoard</h3>

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Platoon" ActiveTroopers="Troopers" />

    <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Compnay" ActiveTroopers="Troopers" />
}
</CascadingValue>

@code {
    [Parameter]
    public PlatoonData? Platoon { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private void BuildTrooperList()
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            Troopers = new()
            {
                Platoon.RT,
                Platoon.ARC,
                Platoon.Medic,
                Platoon.SergeantMajor
            };

            foreach (var squad in Platoon.Squads)
            {
                Troopers.Add(squad.Lead);
                Troopers.Add(squad.RT);
                Troopers.Add(squad.ARC);

                foreach (var t in squad.Teams)
                {
                    Troopers.Add(t.Lead);
                    Troopers.Add(t.Medic);
                    Troopers.AddRange(t.Troopers);
                }
            }

            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager 
            || (Platoon?.Commander?.Id ?? 0) == CurrentUser.Id
            || (Platoon?.SergeantMajor?.Id ?? 0) == CurrentUser.Id;
            
        BuildTrooperList();
    }
}
