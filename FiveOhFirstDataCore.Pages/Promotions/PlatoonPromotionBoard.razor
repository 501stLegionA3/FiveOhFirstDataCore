@inject IAuthorizationService _auth

<CascadingValue Value="CanPromote">
    <CascadingValue Value="CanPromoteValues">
    @if(Troopers is not null)
    {
        <PendingPromotionsListing BoardLevel="Airborne ? PromotionBoardLevel.Company : PromotionBoardLevel.Platoon" ActiveTroopers="Troopers" />

        <EligibleForPromotionListing SendPromotionsTo="Airborne ? PromotionBoardLevel.Battalion : PromotionBoardLevel.Company" ActiveTroopers="Troopers" />
    }
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public PlatoonData Platoon { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    [CascadingParameter(Name = "Airborne")]
    public bool Airborne { get; set; } = false;

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private HashSet<int> CanPromoteValues { get; set; } = new();

    private PromotionType PromoType = PromotionType.Default;

    private void BuildTrooperList()
    {
        Troopers = new();

        if(Platoon.Commander is not null)
            Troopers.Add(Platoon.Commander);
        if(Platoon.SergeantMajor is not null)
            Troopers.Add(Platoon.SergeantMajor);
        if(Platoon.ARC is not null)
            Troopers.Add(Platoon.ARC);
        if(Platoon.Medic is not null)
            Troopers.Add(Platoon.Medic);
        if(Platoon.RT is not null)
            Troopers.Add(Platoon.RT);

        foreach (var squad in Platoon.Squads)
        {
            if(squad.Lead is not null)
                Troopers.Add(squad.Lead);
            if(squad.RT is not null)
                Troopers.Add(squad.RT);
            if(squad.ARC is not null)
                Troopers.Add(squad.ARC);

            foreach (var t in squad.Teams)
            {
                if(t.Lead is not null)
                    Troopers.Add(t.Lead);
                if(t.Medic is not null)
                    Troopers.Add(t.Medic);

                Troopers.AddRange(t.Troopers.Where(x => x != null));
            }
        }

        switch(PromoType)
        {
            case PromotionType.Default:
                CanPromoteValues = Troopers.ToHashSet(x => x.Id);
                break;
            case PromotionType.RTO:
                CanPromoteValues = Troopers.AsQueryable()
                    .Where(x => x.Role == Role.RTO)
                    .ToHashSet(x => x.Id);
                break;
            case PromotionType.Medic:
                CanPromoteValues = Troopers.AsQueryable()
                    .Where(x => x.Role == Role.Medic)
                    .ToHashSet(x => x.Id);
                break;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager
            || (Platoon?.Commander?.Id ?? 0) == CurrentUser?.Id
            || (Platoon?.SergeantMajor?.Id ?? 0) == CurrentUser?.Id;
            
        if(!CanPromote)
        {
            if((Platoon?.RT?.Id ?? 0) == CurrentUser?.Id)
            {
                CanPromote = true;
                PromoType = PromotionType.RTO;
            }
            else if ((Platoon?.Medic?.Id ?? 0) == CurrentUser?.Id)
            {
                CanPromote = true;
                PromoType = PromotionType.Medic;
            }
        }

        BuildTrooperList();
    }
}
