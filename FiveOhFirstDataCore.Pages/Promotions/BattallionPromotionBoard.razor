@inject IAuthorizationService _auth
@inject IRosterService _roster

<h3>Hailstorm Battalion Promotion Board</h3>

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Battalion" ActiveTroopers="Troopers" />

    <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Battalion" ActiveTroopers="Troopers" />
}
</CascadingValue>

@code {
    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [Parameter]
    public HailstormData Battalion { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager
            || (Battalion?.Commander?.Id ?? 0) == CurrentUser.Id 
            || (Battalion?.XO?.Id ?? 0) == CurrentUser.Id
            || (Battalion?.NCOIC?.Id ?? 0) == CurrentUser.Id;

        Troopers = await _roster.GetTroopersWithPendingPromotionsAsync();
    }
}
