@inject IPromotionService _promotion
@inject IAdvancedRefreshService _advRefresh
@inject IWebsiteSettingsService _settings
@inject IAlertService _alert

@if(ModalAlert is not null)
{
    <div class="card text-center mb-3">
        <div class="card-header bg-warning text-dark">
            <div class="modal-title">
                Promotion Warning
            </div>
        </div>
        <div class="card-body">
            <em><b>@(ModalAlert.PromotionFor?.NickName ?? "") has not meet the requirements for this promotion.</b></em>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">NickName</th>
                        <th scope="col">From Rank</th>
                        <th scope="col">To Rank</th>
                        <th scope="col">Reason</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="table-danger">
                        <td><a href="/trooper/@(ModalAlert.PromotionFor?.BirthNumber ?? 0)" target="_blank">@(ModalAlert.PromotionFor?.BirthNumber ?? 0)</a></td>
                        <td>@(ModalAlert.PromotionFor?.NickName ?? "")</td>
                        <td>@ModalAlert.PromoteFrom.GetRank().AsFull()</td>
                        <td>@ModalAlert.PromoteTo.GetRank().AsFull()</td>
                        <td>@ModalAlert.Reason</td>
                    </tr>
                </tbody>
            </table>
            <br />
            You can still pass this promotion up, but until @(ModalAlert.PromotionFor?.NickName ?? "") has meet all the requirements it will be marked as a forced promotion.
        </div>
        <div class="card-footer d-grid gap-2">
            <button type="button" class="btn btn-danger" @onclick="OverrideAccept">Promote</button>
            <button type="button" class="btn btn-secondary" @onclick="OverrideClose">Cancel</button>
        </div>
    </div>
}

<div class="row">
    <div class="col">
        <h4>Troopers Eligible for Promotion</h4>
        @if (Loaded)
        {
            Counter = 0;
            <EditForm Model="this">
                <table class="table table-hover table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">NickName</th>
                            <th scope="col">From Rank</th>
                            <th scope="col">To Rank</th>
                            @if (AllowedPromoter)
                            {
                                <th scope="col"></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (EligiblePromotions.Count > 0)
                        {
                            @foreach(var e in EligiblePromotions)
                            {
                                var c = Counter++;
                                <tr>
                                    <td><a href="/trooper/@e.PromotionFor.BirthNumber" target="_blank">@e.PromotionFor.BirthNumber</a></td>
                                    <td>@e.PromotionFor.NickName</td>
                                    <td>@(e.PromoteFrom.GetRank()?.AsFull() ?? "")</td>
                                    <td>@(e.PromoteTo.GetRank()?.AsFull() ?? "")</td>
                                    @if(AllowedPromoter && CanPromote.Contains(e.PromotionForId))
                                    {
                                        var p = e;
                                        <td>
                                            <div class="input-group">
                                                <div class="input-group-text bg-success">
                                                    <input type="checkbox" class="form-check-input mt-0" checked="@(ConfirmPromote == c)" @onclick="x => { if(ConfirmPromote == c) ConfirmPromote = -1; else ConfirmPromote = c; }" />
                                                </div>
                                                <InputText class="form-control" hidden="@(ConfirmPromote != c)" placeholder="Reason" @bind-Value="PromotionReason" />
                                                <button class="btn btn-outline-success" disabled="@(ConfirmPromote != c)" @onclick="async (x) => await StartPromotion(p)">Raise For Promotion</button>
                                            </div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td></td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="5">No eligible promotions found.</td></tr>
                        }
                    </tbody>
            </table>
        </EditForm>
        }
        else
        {
            <em>Loading....</em>
        }
    </div>
</div>
@if (AllowedPromoter)
{
    @if (!IsPromoting)
    {
        <div class="row">
            <div class="col d-grid gap-2 pb-3">
                <button class="btn btn-primary" @onclick="ToggleStartPromotionForm">Start Promotion Process</button>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="Promotion" class="form">
            <div class="form-group text-center">
                <div class="row p-2">
                    <div class="col pt-4 pb-6">
                        <h3>To Promote</h3>
                        <InputSelectSingleTrooper @bind-Value="Promotion.PromotionFor" Troopers="CanPromoteActual" class="form-control" />
                    </div>
                </div>
                
                @if (Promotion.PromotionFor is not null)
                {
                    <div class="row p-2">
                        <div class="col-md-12 col-lg-6">
                            <h4>Promote From</h4>
                            <InputSelect @bind-Value="Promotion.PromoteFrom" class="form-control">
                                @if(Promotion.PromotionFor.Rank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.Rank.Value)">@(Promotion.PromotionFor.Rank?.AsFull() ?? "")</option>
                                }

                                @if(Promotion.PromotionFor.MedicRank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.MedicRank.Value)">@(Promotion.PromotionFor.MedicRank?.AsFull() ?? "")</option>
                                }

                                @if(Promotion.PromotionFor.RTORank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.RTORank.Value)">@(Promotion.PromotionFor.RTORank?.AsFull() ?? "")</option>
                                }

                                @if(Promotion.PromotionFor.PilotRank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.PilotRank.Value)">@(Promotion.PromotionFor.PilotRank?.AsFull() ?? "")</option>
                                }

                                @if(Promotion.PromotionFor.WarrantRank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.WarrantRank.Value)">@(Promotion.PromotionFor.WarrantRank?.AsFull() ?? "")</option>
                                }

                                @if(Promotion.PromotionFor.WardenRank is not null)
                                {
                                    <option value="@((int)Promotion.PromotionFor.WardenRank.Value)">@(Promotion.PromotionFor.WardenRank?.AsFull() ?? "")</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-12 col-lg-6">
                            <h4>Promote To</h4>
                            <InputSelect @bind-Value="Promotion.PromoteTo" class="form-control">
                                @if (Promotion.PromoteFrom != 0)
                                {
                                    <option value="-1">Select Rank</option>

                                    var c = Promotion.PromoteFrom / 100;
                                    switch(c)
                                    {
                                        case 0:
                                            foreach (TrooperRank r in Enum.GetValues(typeof(TrooperRank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                            if(Promotion.PromoteFrom >= (int)TrooperRank.Trooper)
                                            {
                                                @* allow troopers to be promoted to CW *@
                                                <option value="@((int)WarrantRank.Chief)">@WarrantRank.Chief.AsFull()</option>
                                            }
                                        break;
                                        case 1:
                                            foreach (MedicRank r in Enum.GetValues(typeof(MedicRank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                        break;
                                        case 2:
                                            foreach (RTORank r in Enum.GetValues(typeof(RTORank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                        break;
                                        case 3:
                                            foreach (WarrantRank r in Enum.GetValues(typeof(WarrantRank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                        break;
                                        case 4:
                                            foreach (PilotRank r in Enum.GetValues(typeof(PilotRank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                        break;
                                        case 5:
                                            foreach (WardenRank r in Enum.GetValues(typeof(WardenRank)))
                                            {
                                                var ri = (int)r;
                                                if (ri > Promotion.PromoteFrom)
                                                {
                                                    <option value="@ri">@r.AsFull()</option>
                                                }
                                            }
                                        break;
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row p-2">
                        <div class="col">
                            <h4>Reason for Promotion</h4>
                            <InputText @bind-Value="Promotion.Reason" class="form-control"></InputText>
                        </div>
                    </div>
                    <div class="row p-2">
                        <div class="col d-grid gap-2">
                            <button class="btn btn-primary" @onclick="StartPromotion">Request Promotion</button>
                            <button class="btn btn-danger" @onclick="ToggleStartPromotionForm">Cancel</button>
                        </div>
                    </div>
                }
            </div>
        </EditForm>
    }
}
<br class="p-3" />

@code {
    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter(Name = "CanPromote")]
    public bool AllowedPromoter { get; set; }

    [CascadingParameter]
    public HashSet<int> CanPromote { get; set; } = new();

    [Parameter]
    public List<Trooper> ActiveTroopers { get; set; }

    private List<Trooper> CanPromoteActual { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    [CascadingParameter]
    public PromotionBoardLevel BoardLevel { get; set; }

    [Parameter]
    public bool Mynock { get; set; } = false;

    [Parameter]
    public Slot? Filter { get; set; } = null;

    [CascadingParameter(Name = "Airborne")]
    public bool Airborne { get; set; } = false;

    public bool Loaded { get; set; } = false;

    public List<Promotion> EligiblePromotions { get; set; } = new();

    protected int ConfirmPromote { get; set; } = -1;
    protected string PromotionReason { get; set; } = "";
    protected int Counter { get; set; } = 0;

    private bool IsPromoting { get; set; } = false;
    private Promotion Promotion { get; set; } = new();

    private Promotion? ModalAlert { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            await BuildEligiblePromotionsList();

            CanPromoteActual = ActiveTroopers
                .Where(x => CanPromote.Contains(x.Id))
                .ToList();

            Loaded = true;
            StateHasChanged();
        }
    }

    private async Task BuildEligiblePromotionsList()
    {
        if (ActiveTroopers is null) return;

        foreach(var t in ActiveTroopers)
        {
            if (t is null) continue;
            if (Filter is null || t.Slot == Filter)
                EligiblePromotions.AddRange(await _settings.GetEligiblePromotionsAsync(t, true));
        }
    }

    private void ToggleStartPromotionForm()
    {
        IsPromoting = !IsPromoting;

        if (IsPromoting)
            Promotion = new();
    }

    private async Task StartPromotion(Promotion p)
    {
        Promotion = p;
        Promotion.Reason = PromotionReason;
        PromotionReason = "";
        await StartPromotion(false);
        _ = EligiblePromotions.Remove(p);
    }

    private async Task StartPromotion()
    {
        if (EligiblePromotions.Any(x => x.PromotionForId == Promotion.PromotionFor.Id
             && x.PromoteFrom == Promotion.PromoteFrom
             && x.PromoteTo == Promotion.PromoteTo))
        {
            await StartPromotion(true);
        }
        else
        {
            AllowedPromoter = false;
            IsPromoting = false;
            ModalAlert = Promotion;
        }
    }

    private async Task StartPromotion(bool usedForm = true)
    {
        if (AllowedPromoter)
        {
            // Make squad promotions automatically go to platoon level, there is no squad approval process.
            Promotion.CurrentBoard = BoardLevel == PromotionBoardLevel.Squad ? PromotionBoardLevel.Platoon : BoardLevel;

            if (Promotion.CurrentBoard == PromotionBoardLevel.Platoon && Airborne)
                Promotion.CurrentBoard = PromotionBoardLevel.Company;

            if(Promotion.PromoteTo <= 0)
            {
                _alert.PostAlert(this, new List<string>() { "No rank was selected to promote to." });
                return;
            }

            if (usedForm)
                ToggleStartPromotionForm();

            var user = (await AuthStateTask).User;

            var res = await _promotion.StartPromotionProcessAsync(user, Promotion);

            if (!res.GetResult(out var errors))
            {
                _alert.PostAlert(this, errors);
            }
            else
            {
                _alert.PostAlert(this, "Promotion filed successfully!");

                if(BoardLevel >= PromotionBoardLevel.Battalion 
                    && BoardLevel < PromotionBoardLevel.Razor)
                    _advRefresh.CallDataReloadRequest("Promotion_Battalion");
                if(BoardLevel >= PromotionBoardLevel.Company 
                    && BoardLevel < PromotionBoardLevel.Razor)
                {
                    _advRefresh.CallDataReloadRequest("Promotion_Company");
                    if(Mynock)
                    {
                        _advRefresh.CallDataReloadRequest("Promotion_Mynock_Command");
                    }
                }
                if (BoardLevel >= PromotionBoardLevel.Platoon
                    && BoardLevel < PromotionBoardLevel.Razor)
                {
                    if(Airborne)
                        _advRefresh.CallDataReloadRequest("Promotion_Company");
                    else
                        _advRefresh.CallDataReloadRequest("Promotion_Platoon");
                }
                if(BoardLevel >= PromotionBoardLevel.Squad 
                    && BoardLevel < PromotionBoardLevel.Razor)
                {
                    _advRefresh.CallDataReloadRequest("Promotion_Squad");
                    if(Mynock)
                    {
                        _advRefresh.CallDataReloadRequest("Promotion_Mynock_Section");
                    }
                }
                if (BoardLevel == PromotionBoardLevel.Razor)
                    _advRefresh.CallDataReloadRequest("Promotion_Razor");
                else if (BoardLevel == PromotionBoardLevel.Warden)
                    _advRefresh.CallDataReloadRequest("Promotion_Warden");
            }
            StateHasChanged();
        }
    }

    private async Task OverrideAccept()
    {
        AllowedPromoter = true;
        ModalAlert = null;
        Promotion.Forced = true;
        await StartPromotion(false);
    }

    private void OverrideClose()
    {
        Promotion = new();
        ModalAlert = null;
        AllowedPromoter = true;
    }
}
