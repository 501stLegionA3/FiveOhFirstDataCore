@inject IAuthorizationService _auth

<h3>SquadPromotionBoard</h3>

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <CascadingValue Value="Troopers">

        <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Squad" />

        <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Platoon" />

    </CascadingValue>
}
</CascadingValue>

@code {
    [CascadingParameter]
    public SquadData Squad { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            Troopers = new()
            {
                Squad.RT,
                Squad.ARC
            };

            foreach(var t in Squad.Teams)
            {
                Troopers.Add(t.Lead);
                Troopers.Add(t.Medic);
                Troopers.AddRange(t.Troopers);
            }

            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager || Squad.Lead.Id == CurrentUser.Id;
    }
}
