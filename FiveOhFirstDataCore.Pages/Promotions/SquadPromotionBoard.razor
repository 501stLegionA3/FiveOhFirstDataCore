@inject IAuthorizationService _auth

<h3>SquadPromotionBoard</h3>

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Squad" ActiveTroopers="Troopers" />

    <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Platoon" ActiveTroopers="Troopers" />
}
</CascadingValue>

@code {
    [Parameter]
    public SquadData Squad { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private void BuildTrooperList()
    {
        Troopers = new()
        {
            Squad.RT,
            Squad.ARC
        };

        foreach(var t in Squad.Teams)
        {
            Troopers.Add(t.Lead);
            Troopers.Add(t.Medic);
            Troopers.AddRange(t.Troopers);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager || (Squad?.Lead?.Id ?? 0) == CurrentUser?.Id;
        
        BuildTrooperList();
    }
}
