@inject IAuthorizationService _auth

<CascadingValue Value="CanPromote">
    <CascadingValue Value="CanPromoteValues">
    @if(Troopers is not null)
    {
        <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Squad" ActiveTroopers="Troopers" Mynock="true" />

        <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Company" ActiveTroopers="Troopers" Mynock="true" />
    }
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public MynockSectionData Mynock { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;
    private HashSet<int> CanPromoteValues { get; set; } = new();

    private void BuildTrooperList()
    {
        Troopers = new()
        {
            Mynock.Lead,
            Mynock.RT
        };

        foreach(var team in Mynock.Teams)
        {
            Troopers.Add(team.Lead);
            Troopers.Add(team.Medic);
            Troopers.AddRange(team.Troopers);
        }

        if (CanPromote)
            CanPromoteValues = Troopers.ToHashSet(x => x.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager
            || (Mynock?.Lead?.Id ?? 0) == CurrentUser?.Id;

        BuildTrooperList();
    }
}
