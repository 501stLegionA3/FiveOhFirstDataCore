@inject IAuthorizationService _auth

<CascadingValue Value="CanPromote">
    <CascadingValue Value="CanPromoteValues">
    @if(Troopers is not null)
    {
        <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Warden" ActiveTroopers="Troopers" />

        <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Warden" ActiveTroopers="Troopers" />
    }
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public WardenData Warden { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;
    private HashSet<int> CanPromoteValues { get; set; } = new();

    private void BuildTrooperList()
    {
        Troopers = new();

        if (Warden.Chief is not null)
            Troopers.Add(Warden.Chief);

        foreach(var warden in Warden.Wardens)
        {
            if(warden.SectionLead is not null)
                Troopers.Add(warden.SectionLead);
            if(warden.WardenTwo is not null)
                Troopers.Add(warden.WardenTwo);
            if(warden.WardenThree is not null)
                Troopers.Add(warden.WardenThree);
        }

        if (CanPromote)
            CanPromoteValues = Troopers.ToHashSet(x => x.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager 
            || (Warden?.Master?.Id ?? 0) == CurrentUser?.Id
            || (Warden?.Chief?.Id ?? 0) == CurrentUser?.Id;
        
        BuildTrooperList();
    }
}
