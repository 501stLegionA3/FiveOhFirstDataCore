@inject IAuthorizationService _auth

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Warden" ActiveTroopers="Troopers" />

    <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Warden" ActiveTroopers="Troopers" />
}
</CascadingValue>

@code {
    [Parameter]
    public WardenData Warden { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private void BuildTrooperList()
    {
        Troopers = new()
        {
            Warden.Chief,
        };

        foreach(var warden in Warden.Wardens)
        {
            Troopers.Add(warden.SectionLead);
            Troopers.Add(warden.WardenTwo);
            Troopers.Add(warden.WardenThree);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager 
            || (Warden?.Master?.Id ?? 0) == CurrentUser?.Id
            || (Warden?.Chief?.Id ?? 0) == CurrentUser?.Id;
        
        BuildTrooperList();
    }
}
