@inject IAuthorizationService _auth

<h3>Mynock Command Promotion Board</h3>

<CascadingValue Value="CanPromote">
@if(Troopers is not null)
{
    <PendingPromotionsListing BoardLevel="PromotionBoardLevel.Compnay" ActiveTroopers="Troopers" Mynock="true" />

    <EligibleForPromotionListing SendPromotionsTo="PromotionBoardLevel.Battalion" ActiveTroopers="Troopers" Mynock="true" />
}
</CascadingValue>

@code {
    [Parameter]
    public MynockDetachmentData Mynock { get; set; }

    [CascadingParameter]
    public Trooper CurrentUser { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<Trooper>? Troopers { get; set; } = null;

    private bool CanPromote { get; set; } = false;

    private void BuildTrooperList()
    {
        Troopers = new()
        {
            Mynock.Medic,
            Mynock.NCOIC,
            Mynock.RT,
        };

        foreach(var section in Mynock.Sections)
        {
            Troopers.Add(section.Lead);
            Troopers.Add(section.RT);

            foreach(var team in section.Teams)
            {
                Troopers.Add(team.Lead);
                Troopers.Add(team.Medic);
                Troopers.AddRange(team.Troopers);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var user = (await AuthStateTask).User;

        bool manager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;

        CanPromote = manager 
            || (Mynock?.Commander?.Id ?? 0) == CurrentUser?.Id
            || (Mynock?.NCOIC?.Id ?? 0) == CurrentUser?.Id;
        
        BuildTrooperList();
    }
}
