@inject IRefreshRequestService _refresh

<EditForm Model="Search" class="form form-inline w-100">
    <table class="w-100 justify-content-center">
        <tr>
            <td>
            <div class="input-group">
                    <button class="@GetSortButtonClass(0) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(0)"></button>
                    <InputText class="form-control" placeholder="Designation" @bind-Value="d1" id="designation-filter" @oninput="OnDesgChange" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <button class="@GetSortButtonClass(1) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(1)"></button>
                    <InputText class="form-control" placeholder="Birth #" @bind-Value="d2" id="id-roster-filter" @oninput="OnIdChange" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <button class="@GetSortButtonClass(2) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(2)"></button>
                    <InputText class="form-control p-1" placeholder="Nickname" @bind-Value="d3" id="nickname-filter" @oninput="OnNickChange" />
                </div>
            </td>
            <td>
            <div class="input-group">
                <button class="@GetSortButtonClass(3) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(3)"></button>
                <InputSelect @bind-Value="Search.RankFilter" @oninput="OnRankChange" class="form-control form-inline p-1">
                    <option value="null">Rank</option>
                    @foreach(TrooperRank r in Enum.GetValues(typeof(TrooperRank)))
                    {
                        <option value="@r">@r.AsFull()</option>
                    }
                </InputSelect>
            </div>
            </td>
            <td>
            <div class="input-group">
                <button class="@GetSortButtonClass(4) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(4)"></button>
                <InputSelect @bind-Value="Search.UnitFilter" @oninput="OnUnitChange" class="form-control form-inline p-1">
                    <option value="null">Unit</option>
                    @foreach(Slot r in Enum.GetValues(typeof(Slot)))
                    {
                        <option value="@r">@r.AsFull()</option>
                    }
                </InputSelect>
            </div>
            </td>
            <td>
            <div class="input-group">
                <button class="@GetSortButtonClass(5) oi btn input-group-text" aria-hidden="true" @onclick="(x) => OnSearchDirectionChanged(5)"></button>
                <InputSelect @bind-Value="Search.RoleFilter" @oninput="OnRoleChange" class="form-control form-inline p-1">
                    <option value="null">Role</option>
                    @foreach(Role r in Enum.GetValues(typeof(Role)))
                    {
                        <option value="@r">@r.AsFull()</option>
                    }
                </InputSelect>
            </div>
            </td>
        </tr>
    </table>
</EditForm>
<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th scope="col" class="w-5">Designation</th>
            <th scope="col">Birth #</th>
            <th scope="col">Nickname</th>
            <th scope="col">Rank</th>
            <th scope="col">Unit</th>
            <th scope="col">Role</th>
            <th scope="col">TiG</th>
            <th scope="col">TiS</th>
            <td scope="col"></td>
            <AuthorizeView Policy="RequireRosterClerk">
                <Authorized>
                    <td scope="col"></td>
                </Authorized>
            </AuthorizeView>
        </tr>
    </thead>
    <tbody>
        @foreach(var t in Filtered)
        {
            <RosterListingRow Trooper="t" />
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<Trooper> Troopers { get; set; } = new();
    private List<Trooper> Filtered { get; set; } = new();

    private string d1 { get; set; } = "";
    private string d2 { get; set; } = "";
    private string d3 { get; set; } = "";

    private RosterSearch Search { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _refresh.RefreshRequested += RefreshMe;

        await BuildFilteredList();
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    public Task BuildFilteredList()
    {
        Filtered = Troopers;

        if(!string.IsNullOrWhiteSpace(Search.DesignationFilter))
        {
            Filtered = Filtered.Where(x => 
            {
                if(x.Role == Role.RTO)
                {
                    return x.RTORank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
                else if(x.Slot >= Slot.Razor && x.Slot < Slot.Warden)
                {
                    return x.PilotRank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
                else if(x.Role == Role.Medic)
                {
                    return x.MedicRank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
                else if (x.Slot >= Slot.Warden && x.Slot < Slot.ZetaCompany)
                {
                    return x.WardenRank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
                else if(x.WarrantRank is not null)
                {
                    return x.WarrantRank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
                else
                {
                    return x.Rank?.AsShorthand().StartsWith(Search.DesignationFilter, StringComparison.OrdinalIgnoreCase) ?? false;
                }
            }).ToList();
        }

        if(!string.IsNullOrWhiteSpace(Search.NickNameFilter))
        {
            Filtered = Filtered.Where(x => x.NickName.StartsWith(Search.NickNameFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if(!string.IsNullOrWhiteSpace(Search.IdFilter))
        {
            Filtered = Filtered.Where(x => x.Id.ToString().StartsWith(Search.IdFilter, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if(Search.RankFilter is not null)
        {
            Filtered = Filtered.Where(x => x.Rank == Search.RankFilter).ToList();   
        }

        if(Search.UnitFilter is not null)
        {
            Filtered = Filtered.Where(x => x.Slot == Search.UnitFilter).ToList();   
        }

        if(Search.RoleFilter is not null)
        {
            Filtered = Filtered.Where(x => x.Role == Search.RoleFilter).ToList();   
        }

        if (Search.Ascending)
        {
            switch(Search.SortByColumn)
            {
                case 0:
                    Filtered.Sort((x, y) => x.GetRankDesignation().CompareTo(y.GetRankDesignation()));
                    break;
                case 2:
                    Filtered.Sort((x, y) => x.NickName.CompareTo(y.NickName));
                    break;
                case 3:
                    Filtered.Sort((x, y) =>
                    {
                        if (x.Rank is null && y.Rank is null)
                        {
                            return x.GetRankName().CompareTo(y.GetRankName());
                        }

                        if (x.Rank is null) return -1;
                        if (y.Rank is null) return 1;

                        return x.Rank.Value.CompareTo(y.Rank.Value);
                    });
                    break;
                case 4:
                    Filtered.Sort((x, y) => x.Slot.CompareTo(y.Slot));
                    break;
                case 5:
                    Filtered.Sort((x, y) => x.GetRoleName().CompareTo(y.GetRoleName()));
                    break;
                case 1:
                default:
                    Filtered.Sort((x, y) => x.Id.CompareTo(y.Id));
                    break;
            }
        }
        else
        {
            switch(Search.SortByColumn)
            {
                case 0:
                    Filtered.Sort((x, y) => y.GetRankDesignation().CompareTo(x.GetRankDesignation()));
                    break;
                case 2:
                    Filtered.Sort((x, y) => y.NickName.CompareTo(x.NickName));
                    break;
                case 3:
                    Filtered.Sort((x, y) =>
                    {
                        if (x.Rank is null && y.Rank is null)
                        {
                            return y.GetRankName().CompareTo(x.GetRankName());
                        }

                        if (y.Rank is null) return -1;
                        if (x.Rank is null) return 1;

                        return y.Rank.Value.CompareTo(x.Rank.Value);
                    });
                    break;
                case 4:
                    Filtered.Sort((x, y) => y.Slot.CompareTo(x.Slot));
                    break;
                case 5:
                    Filtered.Sort((x, y) => y.GetRoleName().CompareTo(x.GetRoleName()));
                    break;
                case 1:
                default:
                    Filtered.Sort((x, y) => y.Id.CompareTo(x.Id));
                    break;
            }
        }

        _refresh.CallRequestRefresh();

        return Task.CompletedTask;
    }

    private Task OnSearchDirectionChanged(int col)
    {
        if(col == Search.SortByColumn)
            Search.Ascending = !Search.Ascending;
        else
        {
            Search.SortByColumn = col;
            Search.Ascending = true;
        }

        return BuildFilteredList();
    }

    public Task OnDesgChange(ChangeEventArgs e)
    {
        Search.DesignationFilter = (string?)e.Value ?? "";

        return BuildFilteredList();
    }

    public Task OnIdChange(ChangeEventArgs e)
    {
        Search.IdFilter = (string?)e.Value ?? "";

        return BuildFilteredList();
    }

    public Task OnNickChange(ChangeEventArgs e)
    {
        Search.NickNameFilter = (string?)e.Value ?? "";

        return BuildFilteredList();
    }

    public Task OnRankChange(ChangeEventArgs e)
    {
        var val = ((string?)e.Value) ?? "";

        if(val == "null") Search.RankFilter = null;
        else Search.RankFilter = val.ValueFromString<TrooperRank>();

        return BuildFilteredList();
    }

    public Task OnUnitChange(ChangeEventArgs e)
    {
        var val = ((string?)e.Value) ?? "";

        if(val == "null") Search.UnitFilter = null;
        else Search.UnitFilter = val.ValueFromString<Slot>();

        return BuildFilteredList();
    }

    public Task OnRoleChange(ChangeEventArgs e)
    {
        var val = ((string?)e.Value) ?? "";

        if(val == "null") Search.RoleFilter = null;
        else Search.RoleFilter = val.ValueFromString<Role>();

        return BuildFilteredList();
    }

    public string GetSortButtonClass(int col)
    {
        if (col == Search.SortByColumn)
            return Search.Ascending ? "oi-chevron-top" : "oi-chevron-bottom";
        else return "oi-menu";
    }
}
