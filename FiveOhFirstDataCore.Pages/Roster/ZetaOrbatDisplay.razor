@inject IRosterService _roster
@inject IAdvancedRefreshService _advRefresh
@implements IRefreshBase


@if(Data is not null)
{
    <table class="table table-striped table-hover">
        <HailstormDisplay Hailstorm="Data.Hailstorm" Single="true" />
        <ZetaDisplay Zeta="Data.Zeta" />
    </table>
}
else
{
    <em>Loading...</em>
}

@code {
    public ZetaOrbatData Data { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _advRefresh.AddDataReloadListener("UserData", OnDataReloadRequests);
            Data = await _roster.GetZetaOrbatDataAsync();
            StateHasChanged();
        }
    }

    public async Task CallRefreshRequest()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task OnDataReloadRequests()
    {
        Data = await _roster.GetZetaOrbatDataAsync();
        await CallRefreshRequest();
    }

    public void Dispose()
    {
        _advRefresh.RemoveDataReloadListener(OnDataReloadRequests);
    }
}
