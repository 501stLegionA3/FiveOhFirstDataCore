@inject IUpdateService _update
@inject NavigationManager _nav
@inherits PaginationModel

@if (Items.Count > 0)
{
    Counter = 0;

    @if(Errors.Count > 0)
    {
    <div class="row">
        <div class="col p-3">
            <div class="alert alert-danger alert-dismissible w-100">
                <button type="button" class="btn oi oi-x float-right" @onclick="ClearErrors"></button>
                <strong>Something went wrong!</strong>
                <ul>
                @foreach(var i in Errors)
                {
                    <li>@i</li>
                }
                </ul>
            </div>
        </div>
    </div>
    }

    <div class="row">
        <div class="col"><h4>Change For</h4></div>
        <div class="col"></div>
        <div class="col"><h4>Details</h4></div>
        <div class="col"></div>
        <div class="col"><h4>Changed By</h4></div>
        <div class="col"><h4>Date</h4></div>
        <div class="col"></div>
    </div>

    <div class ="row">
        <div class="col">
            <PaginationController Controller="this" />
        </div>
    </div>

    @foreach (var u in Items)
    {
        var i = Counter;

        var update = (UpdateBase)u;

        <div class="row border border-bottom p-2">
            @if (ActiveDisplay != i)
            {
                <div class="col">[@update.ChangedForId] @update.ChangedFor?.NickName</div>
            }

            @switch (update)
            {
                case CShopUpdate c:
                    List<string> added = new();
                    List<string> removed = new();
                    foreach (CShop shop in Enum.GetValues(typeof(CShop)))
                    {
                        if ((shop & c.Added) == shop && shop != CShop.None)
                        {
                            added.Add(shop.AsFull());
                        }

                        if ((shop & c.Removed) == shop && shop != CShop.None)
                        {
                            removed.Add(shop.AsFull());
                        }
                    }

                    @if (ActiveDisplay != i)
                    {

                        <div class="col"><b>CShops</b></div>
                        <div class="col"><b>Added:</b> @string.Join(", ", added)</div>
                        <div class="col"><b>Removed:</b> @string.Join(", ", removed)</div>
                        <div class="col">[@c.ChangedById] @c.ChangedBy?.NickName</div>
                    }
                    else               
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">C-Shop Update for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col" class="table-success">Added</th>
                                                <th scope="col" class="table-danger">Removed</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        @for (int x = 0; x < added.Count || x < removed.Count; x++)
                                        {
                                            <tr>
                                                <td class="table-success">@(x < added.Count ? added[x] : "")</td>
                                                <td class="table-danger">@(x < removed.Count ? removed[x] : "")</td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Changed By: [@c.ChangedById] @c.ChangedBy?.NickName</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }

                    break;
                case NickNameUpdate c:
                    @if (ActiveDisplay != i)
                    {

                        <div class="col"><b>Nickname</b></div>
                        <div class="col"><b>Old:</b> @c.OldNickname</div>
                        <div class="col"><b>New:</b> @c.NewNickname</div>
                        <div class="col">[@c.ApprovedById] @c.ApprovedBy?.NickName</div>
                    }
                    else               
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">Nickname Change for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col" class="table-success">New Nickname</th>
                                                <th scope="col" class="table-danger">Old Nickname</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td class="table-success">@c.NewNickname</td>
                                                <td class="table-danger">@c.OldNickname</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Approved By: [@c.ApprovedById] @c.ApprovedBy?.NickName</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }
                break;
                case QualificationUpdate c:
                    added = new();
                    removed = new();
                    List<string> instructors = new();
                    foreach (Qualification qual in Enum.GetValues(typeof(Qualification)))
                    {
                        if ((qual & c.Added) == qual && qual != Qualification.None)
                        {
                            added.Add(qual.AsFull());
                        }

                        if ((qual & c.Removed) == qual && qual != Qualification.None)
                        {
                            removed.Add(qual.AsFull());
                        }
                    }

                    foreach(var instruct in c.Instructors)
                    {
                        instructors.Add($"[{instruct.Id}] {instruct?.NickName}");
                    }

                    @if (ActiveDisplay != i)
                    {
                        <div class="col"><b>Qualifications</b></div>
                        <div class="col"><b>Added:</b> @string.Join(", ", added)</div>
                        <div class="col"><b>Removed:</b> @string.Join(", ", removed)</div>
                        <div class="col"><b>Instructors:</b> @string.Join(", ", instructors)</div>
                    }
                    else               
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">Qualification Update for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col" class="table-success">Added</th>
                                                <th scope="col" class="table-danger">Removed</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        @for (int x = 0; x < added.Count || x < removed.Count; x++)
                                        {
                                            <tr>
                                                <td class="table-success">@(x < added.Count ? added[x] : "")</td>
                                                <td class="table-danger">@(x < removed.Count ? removed[x] : "")</td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Instructors: @string.Join(", ", instructors)</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }
                    break;
                case RankUpdate c:
                    @if (ActiveDisplay != i)
                    {

                        <div class="col"><b>Rank</b></div>
                        <div class="col"><b>Old:</b> @c.ChangedFrom.GetRank()</div>
                        <div class="col"><b>New:</b> @c.ChangedTo.GetRank()</div>
                        <div class="col">[@c.RequestedById] @c.RequestedBy?.NickName</div>
                    }
                    else               
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">Rank Change for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th scope="col" class="table-success">New Rank</th>
                                                <th scope="col" class="table-danger">Old Rank</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td class="table-success">@c.ChangedTo.GetRank()</td>
                                                <td class="table-danger">@c.ChangedFrom.GetRank()</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Changed By: [@c.RequestedById] @c.RequestedBy?.NickName</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }
                    break;
                case RecruitmentUpdate c:
                    <div class="col"><b>Recruitment Information</b></div>
                    <div class="col"></div>
                    <div class="col"></div>
                    <div class="col">[@c.RecruitedById] @c.RecruitedBy?.NickName</div>
                    break;
                case SlotUpdate c:
                    List<string> approved = new();

                    foreach(var app in c.ApprovedBy)
                    {
                        approved.Add($"[{app.Id}] {app?.NickName}");
                    }

                    bool[] changed = new bool[]
                    {
                        c.NewSlot != c.OldSlot,
                        c.NewTeam != c.OldTeam,
                        c.NewRole != c.OldRole,
                        c.NewFlight != c.OldFlight
                    };

                    @if (ActiveDisplay != i)
                    {
                        <div class="col"><b>Slot</b> </div>
                        <div class="col"><b>Changed:</b> @changed.Where(x => x).Count()</div>
                        <div class="col"><b>Unchanged:</b> @changed.Where(x => !x).Count()</div>
                        <div class="col"><b>Approved By:</b> @string.Join(", ", approved)</div>
                    }
                    else               
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">Slot Change for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <td scope="col" class="table-primary">Type</td>
                                                <th scope="col" class="table-success">New Slot</th>
                                                <th scope="col" class="table-danger">Old Slot</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if(changed[0])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Slot</th>
                                                    <td class="table-success">@c.NewSlot.AsFull()</td>
                                                    <td class="table-danger">@c.OldSlot.AsFull()</td>
                                                </tr>
                                            }
                                            @if(changed[1])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Team</th>
                                                    <td class="table-success">@(c.NewTeam?.AsFull() ?? "n/a")</td>
                                                    <td class="table-danger">@(c.OldTeam?.AsFull() ?? "n/a")</td>
                                                </tr>
                                            }
                                            @if(changed[2])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Role</th>
                                                    <td class="table-success">@(c.NewRole?.AsFull() ?? "n/a")</td>
                                                    <td class="table-danger">@(c.OldRole?.AsFull() ?? "n/a")</td>
                                                </tr>
                                            }
                                            @if(changed[3])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Flight</th>
                                                    <td class="table-success">@(c.NewFlight?.AsFull() ?? "n/a")</td>
                                                    <td class="table-danger">@(c.OldFlight?.AsFull() ?? "n/a")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Approved By: @string.Join(", ", approved)</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }
                    break;
                    case TimeUpdate c:

                    changed = new bool[]
                    {
                        c.NewGraduatedBCT is not null,
                        c.NewGraduatedUTC is not null,
                        c.NewBilletChange is not null,
                        c.NewPromotion is not null,
                        c.NewStartOfService is not null
                    };
                    
                    if(ActiveDisplay != i)
                    {
                        <div class="col"><b>Times</b></div>
                        <div class="col"><b>Changed:</b> @changed.Where(x => x).Count()</div>
                        <div class="col"><b>Unchanged:</b> @changed.Where(x => !x).Count()</div>
                        <div class="col"><b>Changed By:</b> [@c.ChangedById] @c.ChangedBy?.NickName</div>
                    }
                    else
                    {
                        <div class="col">
                            <div class="card mb-3 w-100 m-3">
                                <div class="card-header btn-toolbar justify-content-between">
                                    <h5 class="modal-title">Time Change for [@c.ChangedForId] @c.ChangedFor?.NickName on @update.ChangedOn.ToString("u")</h5>
                                    <button type="button" class="btn-close oi oi-x btn btn-outline-secondary" @onclick="ResetActive" aria-label="Close">
                                        <span aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="card-body text-center">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <td scope="col" class="table-primary">Type</td>
                                                <th scope="col" class="table-success">New Time</th>
                                                <th scope="col" class="table-danger">Old Time</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if(changed[0])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">BCT</th>
                                                    <td class="table-success">@c.NewGraduatedBCT.Value.ToString("f")</td>
                                                    <td class="table-danger">@c.OldGraduatedBCT.Value.ToString("f")</td>
                                                </tr>
                                            }
                                            @if(changed[1])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">UTC</th>
                                                    <td class="table-success">@c.NewGraduatedUTC.Value.ToString("f")</td>
                                                    <td class="table-danger">@c.OldGraduatedUTC.Value.ToString("f")</td>
                                                </tr>
                                            }
                                            @if(changed[2])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Billet</th>
                                                    <td class="table-success">@c.NewBilletChange.Value.ToString("f")</td>
                                                    <td class="table-danger">@c.OldBilletChange.Value.ToString("f")</td>
                                                </tr>
                                            }
                                            @if(changed[3])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Last Promotion</th>
                                                    <td class="table-success">@c.NewPromotion.Value.ToString("f")</td>
                                                    <td class="table-danger">@c.OldPromotion.Value.ToString("f")</td>
                                                </tr>
                                            }
                                            @if(changed[4])
                                            {
                                                <tr>
                                                    <th scope="col" class="table-primary">Start of Service</th>
                                                    <td class="table-success">@c.NewStartOfService.Value.ToString("f")</td>
                                                    <td class="table-danger">@c.OldStartOfService.Value.ToString("f")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                <div class="card-footer btn-toolbar justify-content-between">
                                    <label class="float-left text-muted">Changed By: [@c.ChangedById] @c.ChangedBy?.NickName</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-danger" id="confim-addon"><input type="checkbox" @onchange="(x) => ConfirmRevert = (bool?)x.Value ?? false" /></span> 
                                        <button class="btn btn-danger" disabled="@(!ConfirmRevert)" @onclick="async (x) => await OnRevertChanges(update)">Revert Changes</button>
                                    </div>
                                    <button class="btn btn-primary" @onclick="ResetActive">Close</button>
                                </div>
                            </div>
                        </div>
                    }
                    break;
                default:
                    break;
            }

            @if (ActiveDisplay != i)
            {
                <div class="col">@update.ChangedOn.ToString("u")</div>
                <div class="col"><a class="oi oi-fullscreen-enter" @onclick="x => { ActiveDisplay = i; StateHasChanged(); }"></a></div>
            }
        </div>
    }

    <div class="row pt-3">
        <div class="col">
            <PaginationController Controller="this" />
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Trooper? CurrentManager { get; set; }

    public int Counter { get; set; } = 0;

    public int ActiveDisplay { get; set; } = -1;
    public bool ConfirmRevert { get; set; } = false;

    public List<string> Errors { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            await InitalizeAsync(_update.GetAllUpdates, _update.GetAllUpdatesCountAsync, itemsPerPage: 15);
        }
    }

    private void ResetActive(EventArgs e)
    {
        ActiveDisplay = -1;
        ConfirmRevert = false;
    }

    private void ClearErrors(EventArgs e)
    {
        Errors.Clear();
        StateHasChanged();
    }

    private async Task OnRevertChanges(UpdateBase update)
    {
        Errors.Clear();

        var res = await _update.RevertUpdateAsync(CurrentManager, update);

        if(!res.GetResult(out var errors))
        {
            Errors = errors;
        }
        
        ResetActive(null);
        _nav.NavigateTo(_nav.Uri, true);
    }
}
