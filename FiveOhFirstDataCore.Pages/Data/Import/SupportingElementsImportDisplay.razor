@*Visual studio said fuck you and wont recognize imports for this file.
The file still builds without the imports below, as they are in _Imports.razor,
but the file gets populated with intellisense errors.*@

@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Authorization
@using System.IO
@using FiveOhFirstDataCore.Data.Services
@using FiveOhFirstDataCore.Data.Structures
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using FiveOhFirstDataCore.Data.Structures.Import

@inject IImportService _import
@inject IAuthorizationService _auth
@inject IWebHostEnvironment _env

<EditForm Context="importSupportingElementsDataContext" Model="Import">
    <div class="row">
        <div class="col-lg col-md-12">
            <div class="form-group">
                <label for="importOrbat" class="form-label mt-4">Import Inactive Reserves .csv</label>
                <InputFile class="form-control" id="importOrbat" OnChange="LoadTraining" accept=".csv" />
            </div>
        </div>
        <div class="col-lg col-md-12">
            <div class="form-group">
                <label for="importOrbat" class="form-label mt-4">Import Training Form .csv</label>
                <InputFile class="form-control" id="importOrbat" OnChange="LoadTraining" accept=".csv" />
            </div>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col d-grid gap-2">
            <button type="button" class="btn btn-primary" disabled="@Running" @onclick="ImportDataAsync">Import Data</button>
        </div>
    </div>
    @if(Errors.Count > 0)
    {
    <hr />
    <div class="row" id="errors">
        <div class="col">
            <button class="btn btn-warning float-end" @onclick="ClearErrors">Clear Errors</button>
            <hr />
            <ul>
            @foreach(var err in Errors)
            {
                <li class="alert alert-danger">@err</li>
            }
            </ul>
        </div>
    </div>
    }
    @if(Warnings.Count > 0)
    {
    <hr />
    <div class="row" id="errors">
        <div class="col">
            <button class="btn btn-warning float-end" @onclick="ClearWarnings">Clear Warnings</button>
            <hr />
            <ul>
            @foreach(var warn in Warnings)
            {
                <li class="alert alert-warning">@warn</li>
            }
            </ul>
        </div>
    </div>
    }
</EditForm>

@code {
    public SupportingElementsImport Import { get; set; } = new();
    public bool Running { get; set; } = false;

    public List<string> Errors { get; set; } = new();
    public List<string> Warnings { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public IBrowserFile? InactiveFile { get; set; }
    public IBrowserFile? TrainingFile { get; set; }

    private async Task ImportDataAsync(EventArgs e)
    {
        Errors.Clear();
        Warnings.Clear();

        var claims = (await AuthStateTask).User;

        if((await _auth.AuthorizeAsync(claims, "Manager Data Import")).Succeeded)
        {
            Running = true;
            _import.VerifyUnsafeFolder();

            if(InactiveFile is not null)
            {
                var storageName = Path.GetRandomFileName();
                var path = Path.Combine(_env.ContentRootPath,
                    _env.EnvironmentName, "unsafe_uploads",
                    storageName);
                Import.InactiveReservesStream = new(path, FileMode.Create);
                await using var read = InactiveFile.OpenReadStream();
                await read.CopyToAsync(Import.InactiveReservesStream);
            }

            if(TrainingFile is not null)
            {
                var storageName = Path.GetRandomFileName();
                var path = Path.Combine(_env.ContentRootPath,
                    _env.EnvironmentName, "unsafe_uploads",
                    storageName);
                Import.TrainingStream = new(path, FileMode.Create);
                using var read = TrainingFile.OpenReadStream();
                await read.CopyToAsync(Import.TrainingStream);
            }

            var res = await _import.ImportSupportingElementsDataAsync(Import);

            if(!res.GetResultWithWarnings(out var warnings, out var errors))
            {
                Warnings.AddRange(warnings);
                Errors.AddRange(errors);
            } 
            else
            {
                InactiveFile = null;
                TrainingFile = null;

                if (warnings is not null)
                {
                    Warnings.AddRange(warnings);
                }
            }
        }
        else
        {
            Errors.Add("Unable to authenticate user.");
        }

        Running = false;
        StateHasChanged();
    }

    private void ClearErrors(EventArgs e)
    {
        Errors.Clear();
    }

    private void ClearWarnings(EventArgs e)
    {
        Warnings.Clear();
    }

    private void LoadInactive(InputFileChangeEventArgs e)
    {
        foreach(IBrowserFile file in e.GetMultipleFiles(1))
        {
            InactiveFile = file;
        }
    }

    private void LoadTraining(InputFileChangeEventArgs e)
    {
        foreach(IBrowserFile file in e.GetMultipleFiles(1))
        {
            TrainingFile = file;
        }
    }
}