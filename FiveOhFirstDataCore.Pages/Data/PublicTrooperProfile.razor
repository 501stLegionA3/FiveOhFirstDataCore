@using FiveOhFirstDataCore.Data.Structures.Updates
@implements IDisposable
@inject IRosterService _roster
@inject IRefreshRequestService _refresh
@inject IAuthorizationService _auth
@inject IAdvancedRefreshService _advRefresh

@if(Trooper is not null)
{
    <div>
        <div class="row">
            <div class="col">

			</div>
		</div>
	</div>
}
else
{
    <em>Something went wrong, and a trooper was unabled to be loaded. Go <a href="/">home</a>.</em>
}

@code {
    [Parameter]
    public Trooper Trooper { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public bool FirstRender {get; set;} = true;

    private Dictionary<CShop, List<ClaimUpdateData>> ShopPositions { get; set; } = new();

    public string[] ServiceStrings = new string[6];

    private TrooperFlag Flag { get; set; } = new();
    private bool LoadedAdditional { get; set; } = false;

    private TrooperDescription Description {get; set;} = new();
    private bool LoadedDescriptions { get; set; } = false;

    [CascadingParameter]
    private Trooper? LoggedIn { get; set; } = new();

    private List<Qualification> QualValues = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _advRefresh.AddUserSpecificDataReloadListener(Trooper.Id, "DescriptionData", OnDataRefreshRequest);

            QualValues = ((Qualification[])Enum.GetValues(typeof(Qualification))).AsQueryable<Qualification>()
            .Where(x => x != Qualification.None && (Trooper.Qualifications & x) == x).ToList();

            var user = (await AuthStateTask).User;

            ShopPositions = await _roster.GetCShopClaimsAsync(Trooper);

            var now = DateTime.UtcNow.ToEst();
            ServiceStrings[0] = Trooper.LastPromotion.ToShortDateString();
            ServiceStrings[1] = Trooper.StartOfService.ToShortDateString();
            ServiceStrings[2] = now.Subtract(Trooper.LastPromotion).TotalDays.ToString("F0");
            ServiceStrings[3] = now.Subtract(Trooper.StartOfService).TotalDays.ToString("F0");
            ServiceStrings[4] = Trooper.LastBilletChange.ToShortDateString();
            ServiceStrings[5] = now.Subtract(Trooper.LastBilletChange).TotalDays.ToString("F0");

            await LoadFlags();
            LoadedAdditional = true;

            await LoadDescription();
            LoadedDescriptions = true;

            _refresh.RefreshRequested += RefreshMe;
            RefreshMe();
        }
    }

    private void RefreshMe()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task SaveFlag(EventArgs e)
    {
        if (string.IsNullOrWhiteSpace(Flag.Contents)) return;

        var user = (await AuthStateTask).User;
        if((await _auth.AuthorizeAsync(user, "RequireNCO")).Succeeded)
        {
            await _roster.SaveNewFlag(user, Trooper, Flag);
            Flag = new();
            Trooper.Flags.Sort((x, y) => y.CreatedOn.CompareTo(x.CreatedOn));
            _refresh.CallRequestRefresh();
        }
    }

    // Description Methods

    private async Task SaveDescription(EventArgs e)
    {
        if (string.IsNullOrWhiteSpace(Description.Content)) return;

        var user = (await AuthStateTask).User;
        if((await _auth.AuthorizeAsync(user, "RequireNCO")).Succeeded)
        {
            await _roster.SaveNewDescription(user, Trooper, Description);
            Description = new();
            Trooper.Descriptions.Sort((x, y) => x.Order.CompareTo(y.Order));
            Console.WriteLine(Trooper.Id);
            _advRefresh.CallDataReloadRequest("DescriptionData", Trooper.Id);
        }
    }

    private TrooperDescription? CurrentDesc { get; set; }

    private void OnDrag(TrooperDescription desc)
    {
        CurrentDesc = desc;
    }

    private async Task OnDrop(TrooperDescription desc)
    {
        if (CurrentDesc is not null && desc != CurrentDesc)
            await _roster.UpdateDescriptionOrderAsync(Trooper, CurrentDesc, desc.Order);
        CurrentDesc = null;

        _advRefresh.CallDataReloadRequest("DescriptionData", Trooper.Id);
    }

    private async Task DeleteDescription(TrooperDescription desc)
    {
        await _roster.DeleteDescriptionAsync(Trooper, desc);
        _advRefresh.CallDataReloadRequest("DescriptionData", Trooper.Id);
    }

    public async Task OnDataRefreshRequest()
    {
        Trooper = await _roster.GetTrooperFromIdAsync(Trooper.Id);
        await LoadDescription();
        await LoadFlags();

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadFlags()
    {
        await _roster.LoadPublicProfileDataAsync(Trooper);
        Trooper.Flags.Sort((x, y) => y.CreatedOn.CompareTo(x.CreatedOn));
    }

    private async Task LoadDescription()
    {
        await _roster.LoadDescriptionsAsync(Trooper);
        Trooper.Descriptions.Sort((x, y) => x.Order.CompareTo(y.Order));
    }


    void IDisposable.Dispose()
    {
        _refresh.RefreshRequested -= RefreshMe;
        _advRefresh.RemoveDataReloadListener(OnDataRefreshRequest);
    }
}
