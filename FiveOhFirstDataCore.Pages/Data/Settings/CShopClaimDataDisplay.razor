@if(Claim is not null)
{
    Counter = 0;
    <div class="accordion p-3" id="@($"claimdata-{Claim.Key}-claims-accordion")">
        @foreach (var item in Claim.ClaimData)
        {
            Counter++;
            var itemLocal = item;
            <div class="accordion-item">
                <h2 class="accordion-header" id="">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#{Claim.Key}-body-{Counter}")" aria-expanded="false" aria-controls="@($"{Claim.Key}-body-{Counter}")">
                        @item.Key
                    </button>
                </h2>
                <div id="@($"{Claim.Key}-body-{Counter}")" class="accordion-collapse collapse" aria-labelledby="@($"{Claim.Key}-header-{Counter}")" data-bs-parent="@($"#claimdata-{Claim.Key}-claims-accordion")">
                    <div class="p-3">
                        <EditForm Model="Claim" class="form">
                            <div class="form-group">
                            @for(int c = 0; c < item.Value.Count; c++)
                            {
                                var num = c;
                                var i = item.Value[num];
                                bool leadership = Claim.CShopLeadership.Contains(i);
                                bool command = Claim.CShopCommand.Contains(i);
                                <div class="input-group">
                                    <InputText @bind-Value="i" class="form-control" disabled="true" />
                                    <div class="input-group-text">
                                        <InputCheckbox @bind-Value="leadership" class="form-check-input mt-0" id="@($"{Claim.Key}-body-{num}-leadership-check")" @onclick="x => UpdateLeadership(i, leadership)" />
                                        <label class="form-check-label mt-0 ms-1" for="@($"{Claim.Key}-body-{num}-leadership-check")">Leadership</label>
                                    </div>
                                    <div class="input-group-text">
                                        <InputCheckbox @bind-Value="command" class="form-check-input mt-0" id="@($"{Claim.Key}-body-{num}-command-check")" @onclick="x => UpdateCommand(i, command)" />
                                        <label class="form-check-label mt-0 ms-1" for="@($"{Claim.Key}-body-{num}-command-check")">Command</label>
                                    </div>
                                    <button class="btn btn-outline-danger" type="button" @onclick="x => { item.Value.RemoveAt(num); StateHasChanged(); }">Delete</button>
                                </div>
                                <br />
                            }
                            <div class="form-group mt-3">
                                <div class="input-group">
                                    <InputText @bind-Value="NewValue" class="form-control" />
                                    <button class="btn btn-outline-success" @onclick="x => AddValue(itemLocal.Value)">Add Item</button>
                                </div>
                            </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
        <EditForm Model="this" >
            <div class="form-group mt-3">
                <div class="input-group">
                    <InputText @bind-Value="NewSegement" class="form-control" />
                    <button class="btn btn-outline-success" @onclick="AddSegement">Add Group</button>
                </div>
            </div>
            <div class="form-group mt-3">
                <div class="input-group">
                    <InputSelect @bind-Value="ToDelete" class="form-control">
                    @foreach(var group in Claim.ClaimData)
                    {
                        <option value="@group.Key">@group.Key</option>
                    }
                    </InputSelect>
                    <button class="btn btn-outline-danger" @onclick="DeleteSegement">Delete Group</button>
                </div>
            </div>
        </EditForm>
    </div>
    <br class="p-3" />
}
else
{
    <em>No data found.</em>
}

@code { 
    [Parameter]
    public CShopClaim? Claim { get; set; } = null;
    public int Counter { get; set; } = 0;

    public string NewSegement { get; set; } = "";
    public string NewValue { get; set; } = "";
    public string ToDelete { get; set; } = "";

    public void UpdateLeadership(string val, bool isLeader)
    {
        if (isLeader)
            Claim?.CShopLeadership.Remove(val);
        else
            Claim?.CShopLeadership.Add(val);
    }

    public void UpdateCommand(string val, bool isCommand)
    {
        if (isCommand)
            Claim?.CShopCommand.Remove(val);
        else
            Claim?.CShopCommand.Add(val);
    }

    public void AddSegement()
    {
        if(!string.IsNullOrWhiteSpace(NewSegement))
            Claim?.ClaimData.TryAdd(NewSegement, new());
        NewSegement = "";
    }

    public void DeleteSegement()
    {
        if(!string.IsNullOrWhiteSpace(ToDelete))
            Claim?.ClaimData.Remove(ToDelete);
        ToDelete = "";
    }

    public void AddValue(List<string> set)
    {
        if(!string.IsNullOrWhiteSpace(NewValue))
            set.Add(NewValue);
        NewValue = "";
    }
}
