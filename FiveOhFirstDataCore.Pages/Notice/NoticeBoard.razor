@using Microsoft.JSInterop
@implements IDisposable
@inject INoticeService _notice
@inject IRefreshRequestService _refresh
@inject IRosterService _roster
@inject IJSRuntime JS

@if(Board is not null)
{
<div id="@Name">
    @if(!HideName)
    {
    <h3>@Name Notice Board</h3>
    }
    @if (IsEditor)
    {
        <EditForm Model="ToEdit">
            <div class="row">
                <div class="col">
                    @if (IsEditing && EditIndex == -1)
                    {
                        <div class="form-group">
                            <label for="noticeType">Notice Type</label>
                            <InputEnumSelect class="form-select" id="noticeType" @bind-Value="ToEdit.Level" />
                        </div>
                        <div class="form-group">
                            <label for="noticeContent">Notice Content</label>
                            <InputRichText class="form-control" id="noticeContent"  @bind-Value="DummyContents" />
                        </div>
                        <dvi class="form-group">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" id="noticeSticky" @bind-Value="ToEdit.Sticky" />
                                <label class="form-check-label" for="noticeSticky">Is Notice Sticky?</label>
                            </div>
                        </dvi>
                        <div class="form-group">
                            <button type="button" class="btn btn-danger" @onclick="DiscardChanges">Discard Changes</button>
                            <button type="button" class="btn btn-success" @onclick="SaveChanges">Save Changes</button>
                        </div>
                        <hr />
                    }
                    else
                    {
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-primary m-3" @onclick="async (x) => await StartEdit()">Create New Notice</button>
                        </div>
                        <hr />
                    }
                </div>
            </div>
        </EditForm>
    }
    @if (Board is not null)
    {
        int i = 0;
        foreach (var notice in Board.Notices)
        {
            var c = i++;
            var n = notice;
                <div class="row">
                    <div class="col p-2 position-relative">
                        @if (EditIndex != c)
                        {
                            <div class="@n.Level.GetNoticeClasses() ck ck-content text-break">
                                @n.Display
                            </div>
                            @if (IsEditor && !IsEditing)
                            {
                                <div class="form-group position-absolute bottom-0 end-0">
                                    <div class="mb-3 me-4 d-grid gap-2 d-md-block">
                                        <button class="oi oi-pencil btn btn-outline-primary" aria-hidden="true" @onclick="async (x) => await StartEdit(c)"></button>
                                        <button class="oi oi-trash btn btn-outline-danger" aria-hidden="true" @onclick="async (x) => await DeleteAsync(n)"></button>
                                    </div>
                                </div>
                            }
                        }
                        else if (IsEditing)
                        {
                            <EditForm Model="ToEdit">
                                <div class="form-group">
                                    <label for="noticeType">Notice Type</label>
                                    <InputEnumSelect class="form-select" id="noticeType" @bind-Value="ToEdit.Level" />
                                </div>
                                <div class="form-group">
                                    <label for="noticeContent">Notice Content</label>
                                    <InputRichText class="form-control" id="noticeContent" @bind-Value="DummyContents" />
                                </div>
                                <dvi class="form-group">
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input ck ck-content" id="noticeSticky" @bind-Value="ToEdit.Sticky" />
                                        <label class="form-check-label" for="noticeSticky">Is Notice Sticky?</label>
                                    </div>
                                </dvi>
                                <div class="form-group">
                                    <button type="button" class="btn btn-danger" @onclick="DiscardChanges">Discard Changes</button>
                                    <button type="button" class="btn btn-success" @onclick="SaveChanges">Save Changes</button>
                                </div>
                                <hr />
                            </EditForm>
                        }
                </div>
            </div>
        }
    }
</div>
}
else
{
    <em>Loading @Name Notice Board...</em>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }
    [Parameter]
    public string Name { get; set; } = "";
    [Parameter]
    public CShop CSHopOverride { get; set; } = CShop.None;
    [Parameter]
    public List<string> AllowedAccess { get; set; } = new();
    [Parameter]
    public bool HideName { get; set; } = false;

    private bool IsEditor { get; set; } = false;
    private bool IsEditing { get; set; } = false;
    private Notice ToEdit { get; set; } = new();
    private int EditIndex { get; set; } = -1;

    private string DummyContents { get; set; } = "";

    [CascadingParameter]
    private Trooper? CurrentUser { get; set; } = new();

    private NoticeBoardData Board { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            Board = await _notice.GetOrCreateNoticeBoardAsync(Name);
            SortNotices();
            _refresh.CallRequestRefresh();
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var claims = (await AuthStateTask).User;

            IsEditor = claims.IsInRole("Admin")
            || claims.IsInRole("Manager")
            || claims.HasClaim("Notice Board", Name);

            if (CSHopOverride != CShop.None
                && AllowedAccess.Count > 0
                && !IsEditor)
            {
                IsEditor = await _notice.IsAllowedCShopEditor(claims, CSHopOverride, AllowedAccess);
            }

            _refresh.RefreshRequested += RefreshRequested;
        }
    }

    private void SortNotices()
    {
        if (Board is null) return;

        Board.Notices.Sort((x, y) =>
        {
            if ((x.Sticky && y.Sticky)
                || (!x.Sticky && !y.Sticky))
            {
                return y.PostedOn.CompareTo(x.PostedOn);
            }

            return y.Sticky.CompareTo(x.Sticky);
        });
    }

    private void DiscardChanges(EventArgs e)
    {
        DummyContents = "";
        ToEdit = new();
        IsEditing = false;
        EditIndex = -1;
        _refresh.CallRequestRefresh();
    }

    private async Task SaveChanges(EventArgs e)
    {
        if (CurrentUser is not null)
        {
            ToEdit.Contents = DummyContents;
            if (EditIndex >= 0 && EditIndex < Board.Notices.Count)
            {
                await _notice.SaveChangesAsync(Board.Notices[EditIndex]);
            }
            else
            {
                await _notice.PostNoticeAsync(ToEdit, Name, CurrentUser);
            }

            Board = await _notice.GetOrCreateNoticeBoardAsync(Name);
        }

        DiscardChanges(e);
        SortNotices();
        _refresh.CallRequestRefresh();
    }

    private async Task StartEdit(int toEdit = -1)
    {
        if (toEdit >= 0 && toEdit < Board.Notices.Count)
        {
            ToEdit = Board.Notices[toEdit];
            EditIndex = toEdit;
            DummyContents = ToEdit.Contents;
        }
        else
        {
            ToEdit = new();
            EditIndex = -1;
            DummyContents = "";
        }

        IsEditing = true;
        _refresh.CallRequestRefresh();
    }

    private void ContentEdited(ChangeEventArgs e)
    {
        ToEdit.Contents = (string?)e.Value ?? "";
    }

    private async Task DeleteAsync(Notice n)
    {
        await _notice.DeleteNoticeAsync(n);
        Board.Notices.Remove(n);

        _refresh.CallRequestRefresh();
    }

    private void RefreshRequested()
    {
        InvokeAsync(async () =>
        {
            StateHasChanged();
            if (IsEditing)
                _ = await JS.InvokeAsync<object>("useCkEditor", "noticeContent");
        });
    }

    void IDisposable.Dispose()
    {
        _refresh.RefreshRequested -= RefreshRequested;
    }
}
