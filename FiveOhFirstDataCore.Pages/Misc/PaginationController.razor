<nav aria-label="Recent Activity Pagination">
    <ul class="pagination justify-content-center">
        <li class="page-item">
            <button class="page-link" aria-label="Previous" @onclick="async (x) => await Controller.SetPage(1)">
                <span aria-hidden="true" class="bi-chevron-double-left"></span>
            </button>             
        </li>
        <li class="page-item">
            <button class="page-link" aria-label="Previous" @onclick="async (x) => await Controller.PreviousPage()">
                <span aria-hidden="true" class="bi-chevron-left"></span>
            </button>             
        </li>

        @for(int i = Controller.PaginationCounterStart; i <= Controller.PaginationCounterEnd; i++)
        {
            var c = i;
            <li class="page-item @(Controller.PageIndex == c ? "active" : "")">
                <button class="page-link" @onclick="async (x) => await Controller.SetPage(c)">@c</button>
            </li>
        }

        <li class="page-item">
            <button class="page-link" aria-label="Previous" @onclick="async (x) => await Controller.NextPage()">
                <span aria-hidden="true" class="bi-chevron-right"></span>
            </button>             
        </li>
        <li class="page-item">
            <button class="page-link" aria-label="Previous" @onclick="async (x) => await Controller.SetPage(Controller.Segments)">
                <span aria-hidden="true" class="bi-chevron-double-right"></span>
            </button>             
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public PaginationModel Controller { get; set; }
}
