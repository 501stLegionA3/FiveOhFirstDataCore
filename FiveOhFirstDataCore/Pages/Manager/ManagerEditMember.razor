@page "/manager/modify"
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject NavigationManager _nav
@inject IRefreshRequestService _refresh
@inject ICustomMailSender _mail

<AuthorizeView Policy="RequireManager">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Model="Trooper" class="form" Context="modifyTrooperDataContext">
        @if(Message is not null)
        {
        <div class="row">
            <div class="col p-3">
                <div class="alert alert-success alert-dismissible w-100">
                    <button type="button" class="btn oi oi-x float-right" @onclick="ClearMessage"></button>
                    <strong>@Message</strong>
                </div>
            </div>
        </div>
        }
        @if(Errors.Count > 0)
        {
        <div class="row">
            <div class="col p-3">
                <div class="alert alert-danger alert-dismissible w-100">
                    <button type="button" class="btn oi oi-x float-right" @onclick="ClearErrors"></button>
                    <strong>Something went wrong!</strong>
                    <ul>
                    @foreach(var i in Errors)
                    {
                        <li>@i</li>
                    }
                    </ul>
                </div>
            </div>
        </div>
        }
        <div class="row">
            <div class="col form-group">
            <label for="trooperSelection">Trooper To Edit</label>
            <InputSelectSingleTrooper Troopers="AllTroopers" disabled="@IsEditing" class="form-control w-100" id="trooperSelection" @bind-Value="Trooper" />
            </div>
        </div>
        <div class="row">
            <div class="col form-group">
                <button class="btn btn-primary btn-block" disabled="@IsEditing" @onclick="StartEdit">View</button>
            </div>
        </div>
        @if (IsEditing)
        {
        <hr />
        <div class="form-group">
            <h3 class="text-center">Name Management</h3>
            <div class="row">
                <div class="col-lg-6 col-md-12 form-group">
                    <label for="usernameEdit" class="form-label mt-4">Username</label>
                    <InputTextValid Valid="ValidUserName" @oninput="OnEditUserName" id="usernameEdit" @bind-Value="Trooper.UserName" class="form-control" disabled="@(!EditingUserName)" />
                    @if (!EditingUserName)
                    {
                        <button class="btn btn-block btn-warning" @onclick="StartUserNameEdit">Edit</button>
                    }
                    else
                    {
                        <button class="btn w-25 btn-success" @onclick="SaveUserName">Save</button>
                        <button class="btn w-25 btn-danger" @onclick="CancelUserNameEdit">Cancel</button> 
                    }
                </div>
                <div class="col-lg-6 col-md-12 form-group">
                    <label for="nicknameEdit" class="form-label mt-4">Nickname</label>
                    <InputText @bind-Value="Trooper.NickName" class="form-control" disabled />
                    <a href="" class="btn btn-info btn-block">Name Change Form</a>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group">
            <h3 class="text-center">Account Management</h3>
            <div class="row">
                <div class="col">
                    <h5>Password Reset</h5>
                    @if(EmailNotice is not null)
                    {
                        <span class="alert alert-primary">@EmailNotice</span>
                    }
                    <InputText id="emailSendTo" @bind-Value="Trooper.Email" placeholder="Email for password reset." class="form-control"/>
                    <br />
                    <button class="btn btn-primary btn-block m-3" @onclick="SendPasswordReset">Send Password Reset</button>
                </div>
            </div>
            <AuthorizeView Policy="RequireAdmin" Context="adminAuthView">
                <Authorized>
                    <div class="row">
                        <div class="col-lg-6 col-md-12">
                            <h5>Access Grants</h5>
                            <hr />
                            <button class="btn btn-block @(Admin ? "btn-success" : "btn-danger")" disabled="@(CurrentUser.Id != -1 || !EditAdminManagerValues)" @onclick="OnAdminPress">Admin</button>
                            <hr />
                            <button class="btn btn-block @(Manager ? "btn-success" : "btn-danger")" disabled="@(!EditAdminManagerValues)" @onclick="OnManagerPress">Manager</button>
                            <hr />
                            @if(CurrentUser.Id != Trooper.Id)
                            {
                                if (!EditAdminManagerValues)
                                {
                                <button class="btn btn-block btn-warning" @onclick="EditPermStart">Edit</button>
                                }
                                else
                                {
                                <button class="btn btn-block btn-success" @onclick="EditPermSave">Save</button>
                                }
                            }
                        </div>
                        <div class="col-lg-6 col-md-12">
                            <h5>Account Deletion</h5>
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="ReadyToDelete" id="deleteCheckbox" disabled="@(!CanDelete)" />
                                <label class="form-check-label">I understand that this action is ireversable, and deleting an account can not be undone.</label>
                            </div>
                            <label for="pwordDelete" class="form-label">Your Password</label>
                            <InputText class="form-control" id="pwordDelete" type="password" @bind-Value="Password" disabled="@(!CanDelete)" />
                            <button class="btn btn-block btn-danger" disabled="@(!ReadyToDelete || !CanDelete)" @onclick="OnDeleteAccount">Delete Account</button>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
        }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<(string, string)> Urls = new() { ("/", "Home"), ("/manager", "Manager Home"), ("/manager/modify", "Modify Trooper Data") };

    public Trooper Trooper { get; set; } = new();
    public Trooper CurrentUser { get; set; } = new();
    public List<Trooper> AllTroopers { get; set; } = new();

    protected int ToEdit { get; set; } = 0;
    protected string? Message { get; set; } = null;

    public List<string> Errors { get; set; } = new();
    public bool IsEditing { get; set; } = false;

    private string OldUserName { get; set; } = "";
    private bool ValidUserName { get; set; } = true;
    private bool EditingUserName { get; set; } = false;
    private string IdRep { get; set; } = "";
    private bool ValidId { get; set; } = true;
    private bool EditingId { get; set; } = false;

    private string? EmailNotice {get;set;} = null;

    private bool Admin { get; set; } = false;
    private bool Manager { get; set; } = false;
    private bool EditAdminManagerValues { get; set; } = false;

    private bool CanDelete { get; set; } = false;
    private bool ReadyToDelete { get; set; } = false;
    private string Password { get; set; } = "";

    private HashSet<string> CurrentUserNames { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStateTask).User;

        if((await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded)
        {
            CurrentUser = (await _roster.GetTrooperFromClaimsPrincipalAsync(user)) ?? new();

            var querys = _nav.ToAbsoluteUri(_nav.Uri).Query;
            if(QueryHelpers.ParseQuery(querys)
                .TryGetValue("edit", out var edit))
            {
                if(int.TryParse(edit, out int val))
                {
                    IsEditing = true;
                    ToEdit = val;
                }
            }

            if(QueryHelpers.ParseQuery(querys)
                .TryGetValue("message", out var message))
            {
                Message = message;
            }
        }

        _refresh.RefreshRequested += RefreshMe;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        AllTroopers = await _roster.GetAllTroopersAsync();
        AllTroopers.ForEach(x => CurrentUserNames.Add(x.NormalizedUserName));
        
        if(IsEditing)
        {
            var first = AllTroopers.FirstOrDefault(x => x.Id == ToEdit);
            if(first is not null)
            {
                Trooper = first;
                IdRep = Trooper.Id.ToString();
            }
        }

        if (Trooper is null)
            IsEditing = false;
    }

    protected async Task StartEdit(EventArgs e)
    {
        if(Trooper is not null && Trooper.Id != 0)
        {
            IsEditing = true;
            var res = await _roster.GetAdminAndManagerValuesAsync(Trooper.Id.ToString());
            Admin = res.Item1;
            Manager = res.Item2;
            
            var user = (await AuthStateTask).User;
            bool currentManager = (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded;
            bool currentAdmin = (await _auth.AuthorizeAsync(user, "RequireAdmin")).Succeeded;

            if (CurrentUser.Id == -1
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else if (currentAdmin
                && !Admin
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else if (currentManager
                && !(Manager || Admin)
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else
            {
                CanDelete = false;
            }
        }
    }

    private void ClearErrors(EventArgs e)
    {
        Errors.Clear();
        _refresh.CallRequestRefresh();
    }

    private void ClearMessage(EventArgs e)
    {
        Message = null;
        _refresh.CallRequestRefresh();
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    #region Username Edit
    public void StartUserNameEdit(EventArgs e)
    {
        EditingUserName = true;
        OldUserName = Trooper.UserName;
        _refresh.CallRequestRefresh();
    }

    public void CancelUserNameEdit(EventArgs e)
    {
        Trooper.UserName = OldUserName;
        EditingUserName = false;
        ValidUserName = true;
        _refresh.CallRequestRefresh();
    }

    public void OnEditUserName(ChangeEventArgs e)
    {
        Trooper.UserName = (string?)e.Value ?? "";

        var normal = Trooper.UserName.Normalize().ToUpper();
        if(CurrentUserNames.Contains(normal))
        {
            ValidUserName = false;
        }
        else
        {
            ValidUserName = true;
        }

        _refresh.CallRequestRefresh();
    }

    public async Task SaveUserName(EventArgs e)
    {
        if(ValidUserName)
       {
            Errors.Clear();
            EditingUserName = false;

            var res = await _roster.UpdateUserNameAsync(Trooper);
            if(!res.GetResult(out var errors))
            {
                Errors = errors;
                Trooper.UserName = OldUserName;
            }
        }
        
        _refresh.CallRequestRefresh();
    }
    #endregion

    #region password
    private async Task SendPasswordReset(EventArgs e)
    {
        var abs = _nav.ToAbsoluteUri(_nav.BaseUri);
        var callbackBase = $"{abs.Scheme}://{abs.Host}:{abs.Port}";

        await _mail.TriggerRemoteResetPasswordAsync(Trooper.Id.ToString(), Trooper.Email, callbackBase);

        EmailNotice = "Email was sent.";

        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Admin Manager Perms
    private void EditPermStart(EventArgs e)
    {
        if(Trooper.Id != CurrentUser.Id)
        {
            EditAdminManagerValues = true;
        }

        _refresh.CallRequestRefresh();
    }

    private async Task EditPermSave(EventArgs e)
    {
        EditAdminManagerValues = false;

        if(Trooper.Id != CurrentUser.Id)
        {
            await _roster.SaveAdminAndManagerValuesAsync(Admin, Manager, Trooper.Id.ToString());
        }

        _refresh.CallRequestRefresh();
    }

    private void OnAdminPress(EventArgs e)
    {
        Admin = !Admin;
        
        _refresh.CallRequestRefresh();
    }

    private void OnManagerPress(EventArgs e)
    {
        Manager = !Manager;

        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Delete
    private async Task OnDeleteAccount(EventArgs e)
    {
        Errors.Clear();

        if(Trooper.Id != CurrentUser.Id
            && CanDelete)
        {
            var res = await _roster.DeleteAccountAsync(Trooper, Password);
            if(!res.GetResult(out var errors))
            {
                Errors = errors;
                ReadyToDelete = false;
                Password = "";
                _refresh.CallRequestRefresh();
            }
            else
            {
                _nav.NavigateTo($"/manager/modify?message={HtmlEncoder.Default.Encode($"The account for {Trooper.Id} has been deleted.")}", true);
            }
        }
    }
    #endregion
}
