@page "/manager/modify"
@implements IDisposable
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject NavigationManager _nav
@inject IRefreshRequestService _refresh
@inject ICustomMailSender _mail
@inject IAlertService _alert

<DynamicAuthorizeView SectionName="Manager Edit Member">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Model="Trooper" class="form pb-3" Context="modifyTrooperDataContext">
        <div class="row">
            <div class="col form-group">
            <label for="trooperSelection">Trooper To Edit</label>
            <InputSelectSingleTrooper Troopers="AllTroopers" disabled="@IsEditing" class="form-control w-100" id="trooperSelection" @bind-Value="Trooper" />
            </div>
        </div>
        <div class="row">
            <div class="col form-group d-grid gap-2">
                <button class="btn btn-primary" disabled="@IsEditing" @onclick="StartEdit">View</button>
            </div>
        </div>
        @if (IsEditing)
        {
        <hr />
        <div class="form-group">
            <h3 class="text-center">Name Management</h3>
            <div class="row">
                <div class="col-lg-6 col-md-12 form-group">
                    <label for="usernameEdit" class="form-label mt-4">Username</label>
                    @if(!RefreshUsernameField)
                    {
                        <InputTextValid Valid="ValidUserName" @oninput="OnEditUserName" id="usernameEdit" @bind-Value="DummyUsername" class="form-control" disabled="@(!EditingUserName)" />
                        @if (!EditingUserName)
                        {
                            <div class="d-grid gap-2 mx-auto">
                                <button class="btn btn-warning" @onclick="StartUserNameEdit">Edit</button>
                            </div>
                        }
                        else
                        {
                            <div class="d-grid gap-2 mx-auto d-md-block">
                                <button class="btn p-1 btn-success" @onclick="SaveUserName">Save</button>
                                <button class="btn p-1 btn-danger" @onclick="CancelUserNameEdit">Cancel</button> 
                            </div>
                        }
                    }
                    else
                    {
                        RefreshUsernameField = false;
                        StateHasChanged();
                        <em>Loading...</em>
                    }

                    <label for="birthnumberEdit" class="form-label mt-4">Birth Number</label>
                    @if(!RefreshBirthNumberField)
                    {
                        <InputTextValid Valid="ValidBirthNumber" @oninput="OnEditBirthNumber" id="birthnumberEdit" @bind-Value="DummyBirthNumber" class="form-control" disabled="@(!EditingBirthNumber)" />
                        @if (!EditingBirthNumber)
                        {
                            <div class="d-grid gap-2 mx-auto">
                                <button class="btn btn-warning" @onclick="StartBirthNumberEdit">Edit</button>
                            </div>
                        }
                        else
                        {
                            <div class="d-grid gap-2 mx-auto d-md-block">
                                <button class="btn p-1 btn-success" @onclick="SaveBirthNumber">Save</button>
                                <button class="btn p-1 btn-danger" @onclick="CancelBirthNumberEdit">Cancel</button> 
                            </div>
                        }
                    }
                    else
                    {
                        RefreshBirthNumberField = false;
                        StateHasChanged();
                        <em>Loading...</em>
                    }
                </div>
                <div class="col-lg-6 col-md-12 form-group">
                    <label for="nicknameEdit" class="form-label mt-4">Nickname</label>
                    <InputText @bind-Value="Trooper.NickName" class="form-control" disabled />
                    <div class="d-grid gap-2 mx-auto">
                        <a href="/c1/roster/names/change?edit=@Trooper.Id" class="btn btn-info">Name Change Form</a>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group">
            <h3 class="text-center">Claim Management</h3>
            <div class="row">
                <div class="col">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <td><InputText @bind-Value="NewClaimType" class="form-control" placeholder="Claim Type" /></td>
                                <td><InputText @bind-Value="NewClaimValue" class="form-control" placeholder="Claim Value" /></td>
                                <td><button class="btn btn-success" type="button" @onclick="AddClaimAsync">Add Claim</button></td>
                            </tr>
                            <tr>
                                <th scope="colgroup">Type</th>
                                <th scope="colgroup">Value</th>
                                <th scope="colgroup"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var c in Claims)
                            {
                                var claim = c;
                                <tr>
                                    <td>@c.Type</td>
                                    <td>@c.Value</td>
                                    <td><button class="btn btn-danger" type="button" @onclick="async (x) => await RemoveClaimAsync(claim)">Delete</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
            <hr />

            @if (Trooper.Id != -1)
            {
                <div class="form-group">
                    <h3 class="text-center">External Accounts</h3>
                    <div class="row text-center">
                        <div class="col">
                            <h5>Discord ID</h5>
                            <h6>@Trooper.DiscordId</h6>
                        </div>
                        <div class="col">
                            <h5>Steam ID</h5>
                            <a href="https://steamcommunity.com/profiles/@Trooper.SteamLink" rel="nofollow" target="_blank"><h6>@Trooper.SteamLink</h6></a>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    <h3 class="text-center">Account Management</h3>
                    <div class="row">
                        <div class="col">
                            <h5>Password Reset</h5>
                            @if (EmailNotice is not null)
                            {
                                <span class="alert alert-primary">@EmailNotice</span>
                            }
                            <InputText id="emailSendTo" @bind-Value="Trooper.Email" placeholder="Email for password reset." class="form-control"/>
                            <br />
                            <div class="d-grid gap-2 mx-auto">
                                <button class="btn btn-primary m-3" @onclick="SendPasswordReset">Send Password Reset</button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <h5>Account Reset</h5>
                            <div class="from-check">
                                <input type="checkbox" id="confimResetAccount" class="form-check-input" @onclick="ConfirmAccountResetToggle" />
                                <label for="confimResetAccount" class="form-check-label">
                                    I understand that resetting an account will remove Discord and Steam account links, reset the username and password,
                                    and generate a new access code. No 501st releated data will be lost.
                                </label>
                                <div class="d-grid gap-2 mx-auto">
                                    <button class="btn btn-danger m-3" @onclick="ResetAccount" disabled="@(!ResetConfirmation)">Reset Account</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <DynamicAuthorizeView SectionName="Manager Edit Member Admin" Context="adminAuthView">
                        <Authorized>
                            <div class="row">
                                <div class="col-lg-6 col-md-12">
                                    <h5>Access Grants</h5>
                                    <hr />
                                    <div class="d-grid gap-2 mx-auto">
                                        <button class="btn @(Admin ? "btn-success" : "btn-danger")" disabled="@(CurrentUser.Id != -1 || !EditAdminManagerValues)" @onclick="OnAdminPress">Admin</button>
                                    </div>
                                    <hr />
                                    <div class="d-grid gap-2 mx-auto">
                                        <button class="btn @(Manager ? "btn-success" : "btn-danger")" disabled="@(!EditAdminManagerValues)" @onclick="OnManagerPress">Manager</button>
                                    </div>
                                    <hr />
                                    @if (CurrentUser.Id != Trooper.Id)
                                {
                                    <div class="d-grid gap-2 mx-auto">
                                        @if (!EditAdminManagerValues)
                                        {
                                            <button class="btn btn-warning" @onclick="EditPermStart">Edit</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-success" @onclick="EditPermSave">Save</button>
                                        }
                                    </div>
                                }
                            </div>
                            <div class="col-lg-6 col-md-12">
                                <h5>Account Deletion</h5>
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="ReadyToDelete" id="deleteCheckbox" disabled="@(!CanDelete)" />
                                    <label class="form-check-label">I understand that this action is irreversible, and deleting an account can not be undone.</label>
                                </div>
                                <label for="pwordDelete" class="form-label">Your Password</label>
                                <InputText class="form-control" id="pwordDelete" type="password" @bind-Value="Password" disabled="@(!CanDelete)" />
                                <div class="d-grid gap-2 mx-auto">
                                    <button class="btn btn-danger" disabled="@(!ReadyToDelete || !CanDelete)" @onclick="OnDeleteAccount">Delete Account</button>
                                </div>
                            </div>
                        </div>
                    </Authorized>
                </DynamicAuthorizeView>
            </div>
            }
        }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</DynamicAuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public List<(string, string)> Urls = new() { ("/", "Home"), ("/manager", "Manager Home"), ("/manager/modify", "Modify Trooper Data") };

    public List<Claim> Claims { get; set; } = new();
    private string NewClaimType { get; set; } = "";
    private string NewClaimValue { get; set; } = "";

    public Trooper Trooper { get; set; } = new();
    [CascadingParameter]
    public Trooper? CurrentUser { get; set; } = new();
    public List<Trooper> AllTroopers { get; set; } = new();

    protected int ToEdit { get; set; } = 0;
    public bool IsEditing { get; set; } = false;

    private string OldUserName { get; set; } = "";
    private string DummyUsername { get; set; } = "";
    private bool ValidUserName { get; set; } = true;
    private bool EditingUserName { get; set; } = false;
    private bool RefreshUsernameField { get; set; } = false;

    private int OldBirthNumber { get; set; } = 0;
    private string DummyBirthNumber { get; set; } = "";
    private bool ValidBirthNumber { get; set; } = true;
    private bool EditingBirthNumber { get; set; } = false;
    private bool RefreshBirthNumberField { get; set; } = false;

    private string IdRep { get; set; } = "";
    private bool ValidId { get; set; } = true;
    private bool EditingId { get; set; } = false;

    private string? EmailNotice {get;set;} = null;

    private bool Admin { get; set; } = false;
    private bool Manager { get; set; } = false;
    private bool EditAdminManagerValues { get; set; } = false;

    private bool CanDelete { get; set; } = false;
    private bool ReadyToDelete { get; set; } = false;
    private string Password { get; set; } = "";

    private bool ResetConfirmation { get; set; } = false;

    private HashSet<string> CurrentUserNames { get; set; } = new();
    private HashSet<int> CurrentBirthNumbers { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var user = (await AuthStateTask).User;
            if((await _auth.AuthorizeAsync(user, "Manager Edit Member")).Succeeded)
            {
                if(QueryHelpers.ParseQuery(_nav.ToAbsoluteUri(_nav.Uri).Query)
                    .TryGetValue("edit", out var edit))
                {
                    if(int.TryParse(edit, out int val))
                    {
                        IsEditing = true;
                        ToEdit = val;
                    }
                }
            }

            _refresh.RefreshRequested += RefreshMe;

            AllTroopers = await _roster.GetAllTroopersAsync();
            var data = await _roster.GetInUseUserDataAsync();
            CurrentUserNames = data.Item2;
            CurrentBirthNumbers = data.Item1;

            if (IsEditing)
            {
                var first = AllTroopers.FirstOrDefault(x => x.Id == ToEdit);
                if (first is not null)
                {
                    Trooper = first;
                    IdRep = Trooper.Id.ToString();
                }
            }

            if (Trooper is null)
                IsEditing = false;

            _refresh.CallRequestRefresh();
        }
    }

    protected async Task StartEdit(EventArgs e)
    {
        if(Trooper is not null && Trooper.Id != 0)
        {
            IsEditing = true;
            var res = await _roster.GetAdminAndManagerValuesAsync(Trooper.Id.ToString());
            Admin = res.Item1;
            Manager = res.Item2;
            Claims = await _roster.GetAllClaimsFromTrooperAsync(Trooper);
            DummyUsername = Trooper.UserName;

            var user = (await AuthStateTask).User;
            bool currentManager = (await _auth.AuthorizeAsync(user, "Manager Edit Member")).Succeeded;
            bool currentAdmin = (await _auth.AuthorizeAsync(user, "Manager Edit Member Admin")).Succeeded;

            if (CurrentUser.Id == -1
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else if (currentAdmin
                && !Admin
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else if (currentManager
                && !(Manager || Admin)
                && CurrentUser.Id != Trooper.Id)
            {
                CanDelete = true;
            }
            else
            {
                CanDelete = false;
            }
        }
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    #region Username Edit
    public void StartUserNameEdit(EventArgs e)
    {
        EditingUserName = true;
        OldUserName = Trooper.UserName;
        _refresh.CallRequestRefresh();
    }

    public void CancelUserNameEdit(EventArgs e)
    {
        Trooper.UserName = OldUserName;
        DummyUsername = OldUserName;
        EditingUserName = false;
        ValidUserName = true;
        RefreshUsernameField = true;
        _refresh.CallRequestRefresh();
    }

    public void OnEditUserName(ChangeEventArgs e)
    {
        Trooper.UserName = (string?)e.Value ?? "";

        var normal = Trooper.UserName.Normalize().ToUpper();
        if(CurrentUserNames.Contains(normal))
        {
            ValidUserName = false;
        }
        else
        {
            ValidUserName = true;
        }

        _refresh.CallRequestRefresh();
    }

    public async Task SaveUserName(EventArgs e)
    {
        if(ValidUserName)
       {
            EditingUserName = false;

            var res = await _roster.UpdateUserNameAsync(Trooper);
            if(!res.GetResult(out var errors))
            {
                _alert.PostAlert(this, errors);
                Trooper.UserName = OldUserName;
            }
        }
        
        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Birth Number Edit
    public void StartBirthNumberEdit(EventArgs e)
    {
        EditingBirthNumber = true;
        OldBirthNumber = Trooper.BirthNumber;
        _refresh.CallRequestRefresh();
    }

    public void CancelBirthNumberEdit(EventArgs e)
    {
        Trooper.BirthNumber = OldBirthNumber;
        DummyBirthNumber = OldBirthNumber.ToString();
        EditingBirthNumber = false;
        ValidBirthNumber = true;
        RefreshBirthNumberField = true;
        _refresh.CallRequestRefresh();
    }

    public void OnEditBirthNumber(ChangeEventArgs e)
    {
        var tmp = (string?)e.Value ?? "";

        if(int.TryParse(tmp, out int bid))
        {
            Trooper.BirthNumber = bid;
            if(CurrentBirthNumbers.Contains(Trooper.BirthNumber))
            {
                ValidBirthNumber = false;
            }
            else
            {
                ValidBirthNumber = true;
            }
        }
        else
        {
            ValidBirthNumber = false;
        }
        _refresh.CallRequestRefresh();
    }

    public async Task SaveBirthNumber(EventArgs e)
    {
        if(ValidBirthNumber)
       {
            EditingBirthNumber = false;

            var res = await _roster.UpdateBirthNumberAsync(Trooper);
            if(!res.GetResult(out var errors))
            {
                _alert.PostAlert(this, errors);
                Trooper.BirthNumber = OldBirthNumber;
            }
        }
        
        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Claim Management
    private async Task AddClaimAsync(EventArgs e)
    {
        if(string.IsNullOrWhiteSpace(NewClaimType)
            || string.IsNullOrWhiteSpace(NewClaimValue))
        {
            _alert.PostAlert(this, new List<string>() { "Claim must have a Type and a Value." });
            return;
        }

        var c = new Claim(NewClaimType, NewClaimValue);
        var res = await _roster.AddClaimAsync(Trooper, c, CurrentUser.Id);

        if(!res.GetResult(out var errors))
        {
            _alert.PostAlert(this, errors);
        }
        else
        {
            Claims.Add(c);
            NewClaimType = "";
            NewClaimValue = "";
        }

        _refresh.CallRequestRefresh();
    }

    private async Task RemoveClaimAsync(Claim claim)
    {
        var res = await _roster.RemoveClaimAsync(Trooper, claim, CurrentUser.Id);

        if(!res.GetResult(out var errors))
        {
            _alert.PostAlert(this, errors);
        }
        else
        {
            Claims.Remove(claim);
        }

        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Account Management
    private async Task SendPasswordReset(EventArgs e)
    {
        var abs = _nav.ToAbsoluteUri(_nav.BaseUri);
        var callbackBase = $"{abs.Scheme}://{abs.Host}:{abs.Port}";

        await _mail.TriggerRemoteResetPasswordAsync(Trooper.Id.ToString(), Trooper.Email, callbackBase);

        EmailNotice = "Email was sent.";

        _refresh.CallRequestRefresh();
    }

    private async Task ConfirmAccountResetToggle()
    {
        ResetConfirmation = !ResetConfirmation;
    }

    private async Task ResetAccount()
    {
        if(ResetConfirmation)
        {
            var res = await _roster.ResetAccountAsync(Trooper);
            if(!res.GetResult(out var code, out var errors))
            {
                _alert.PostAlert(this, errors);
                ReadyToDelete = false;
                Password = "";
                _refresh.CallRequestRefresh();
            }
            else
            {
                _nav.NavigateTo($"/manager/modify?message={HtmlEncoder.Default.Encode($"The account for {Trooper.Id} has reset. The new access code is: {code}")}", true);
            }
        }

        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Admin Manager Perms
    private void EditPermStart(EventArgs e)
    {
        if(Trooper.Id != CurrentUser.Id)
        {
            EditAdminManagerValues = true;
        }

        _refresh.CallRequestRefresh();
    }

    private async Task EditPermSave(EventArgs e)
    {
        EditAdminManagerValues = false;

        if(Trooper.Id != CurrentUser.Id)
        {
            await _roster.SaveAdminAndManagerValuesAsync(Admin, Manager, Trooper.Id.ToString());
        }

        _refresh.CallRequestRefresh();
    }

    private void OnAdminPress(EventArgs e)
    {
        Admin = !Admin;
        
        _refresh.CallRequestRefresh();
    }

    private void OnManagerPress(EventArgs e)
    {
        Manager = !Manager;

        _refresh.CallRequestRefresh();
    }
    #endregion

    #region Delete
    private async Task OnDeleteAccount(EventArgs e)
    {
        if(Trooper.Id != (CurrentUser?.Id ?? 0)
            && CanDelete)
        {
            var claims = (await AuthStateTask).User;
            var res = await _roster.DeleteAccountAsync(Trooper, Password, claims);
            if(!res.GetResult(out var errors))
            {
                _alert.PostAlert(this, errors);
                ReadyToDelete = false;
                Password = "";
                _refresh.CallRequestRefresh();
            }
            else
            {
                _nav.NavigateTo($"/manager/modify?message={HtmlEncoder.Default.Encode($"The account for {Trooper.Id} has been deleted.")}", true);
            }
        }
    }
    #endregion

    void IDisposable.Dispose()
    {
        _refresh.RefreshRequested -= RefreshMe;
    }
}
