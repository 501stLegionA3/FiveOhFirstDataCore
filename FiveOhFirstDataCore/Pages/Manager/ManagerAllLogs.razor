@page "/manager/logging"
@inject IUpdateService _update

<AuthorizeView Policy="RequireManager">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        @if (!Loading)
        {
            <div class="overflow-auto container-fluid">
                <UpdateDisplayTable Updates="Updates" />
            </div>
        }
        else
        {
        <em>Loading...</em>
        }
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls = new() { ("/", "Home"), ("/manager", "Manager Home"), ("/manager/logging", "Action Logs") };
    public IEnumerable<UpdateBase> Updates { get; set; }
    public bool Loading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            Updates = await _update.GetAllUpdatesAsync();
            StateHasChanged();
        }
        else if (Loading)
        {
            Loading = false;
            StateHasChanged();
        }
    }
}
