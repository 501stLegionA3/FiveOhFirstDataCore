@page "/manager/logging"
@implements IDisposable
@inject ComponentApplicationState _state
@inject NavigationManager _nav
@inject IUpdateService _update

<AuthorizeView Policy="RequireManager">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <UpdateDisplayTable Updates="Updates" />
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls = new() { ("/", "Home"), ("/manager", "Manager Home"), ("/manager/logging", "Action Logs") };
    public IEnumerable<UpdateBase> Updates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _state.OnPersisting += OnPersisting;
        if(_state.TryTakeAsJson<IEnumerable<UpdateBase>?>(_nav.Uri.ToString(), out var data))
        {
            Updates = data;
        }
        else
        {
            Updates = await _update.GetAllUpdatesAsync();
        }
    }

    private Task OnPersisting()
    {
        _state.PersistAsJson(_nav.Uri.ToString(), Updates);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
        => _state.OnPersisting -= OnPersisting;
}
