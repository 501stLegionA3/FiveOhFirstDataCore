@page "/manager/import"
@implements IDisposable
@inject IRefreshRequestService _refresh

<DynamicAuthorizeView SectionName="Manager Data Import">
    <Authorized>

        <ul class="nav nav-tabs row">
            <li class="nav-item col">
                <button class="nav-link w-100 h-100 @(Active == ImportType.OrbatRoster ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(ImportType.OrbatRoster)">ORBAT</button>
            </li>
            <li class="nav-item col">
                <button class="nav-link w-100 h-100 @(Active == ImportType.SupportingElements ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(ImportType.SupportingElements)">Supporting Elements</button>
            </li>
            <li class="nav-item col">
                <button class="nav-link w-100 h-100 @(Active == ImportType.Qualifications ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(ImportType.Qualifications)">Qualifications</button>
            </li>
        </ul>
        <div class="tab-content">
            @switch(Active)
            {
                case ImportType.OrbatRoster:
                    <RosterDataImportDisplay />
                    break;
                case ImportType.SupportingElements:
                    <SupportingElementsImportDisplay />
                    break;
                case ImportType.Qualifications:
                    <QualificationImportDisplay />
                    break;
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</DynamicAuthorizeView>

@code {
    public enum ImportType
    {
        OrbatRoster,
        SupportingElements,
        Qualifications
    }

    public ImportType Active { get; set; } = ImportType.OrbatRoster;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _refresh.RefreshRequested += RefreshMe;
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    protected void OnTypeChange(ImportType newType)
    {
        Active = newType;
        _refresh.CallRequestRefresh();
    }

    void IDisposable.Dispose()
        => _refresh.RefreshRequested -= RefreshMe;
}
