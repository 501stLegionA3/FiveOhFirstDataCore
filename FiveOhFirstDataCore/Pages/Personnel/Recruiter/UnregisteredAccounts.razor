@page "/c1/recruiter/unregistered"
@inject IRosterService _roster
@inject IAuthorizationService _auth

<DynamicAuthorizeView SectionName="Unregistered Troopers">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Context="unregisteredForm" class="form form-inline" Model="this">
            <table class="table table-hover table-striped">
                <thead>
                    <tr>
                        <td colspan="5">
                             <InputText id="idSearch" placeholder="Birth #" class="form-control w-100" @bind-Value="DummyId" @oninput="IdChanged"/>
                        </td>
                        <td colspan="3">
                            <InputText id="nickSearch" placeholder="Nickname" class="form-control w-100" @bind-Value="DummyNick" @oninput="NickChanged"/>
                        </td>
                    </tr>
                    <tr>
                        <th scope="col">Birth #</th>
                        <th scope="col">Nickname</th>
                        <th scope="col">Over 16?</th>
                        <th scope="col">Age</th>
                        <th scope="col">Mods Installed?</th>
                        <th scope="col">Prefered Role</th>
                        <th scope="col">Possible Troll?</th>
                        <th scope="col">Access Token</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var t in Filtered)
                    {
                    <tr class="@((t.RecruitStatus?.PossibleTroll ?? false) ? "table-danger" : "")">
                        <td>@(t.BirthNumber)</td>
                        <td>@(t.NickName)</td>
                        <td>@(t.RecruitStatus?.OverSixteen.ToString() ?? "n/a")</td>
                        <td>@(t.RecruitStatus?.Age.ToString() ?? "n/a")</td>
                        <td>@(t.RecruitStatus?.ModsInstalled.ToString() ?? "n/a")</td>
                        <td>@(t.RecruitStatus?.PreferredRole.AsFull() ?? "n/a")</td>
                        <td>@(t.RecruitStatus?.PossibleTroll.ToString() ?? "n/a")</td>
                        <td>@(t.AccessCode)</td>
                    </tr>
                    }
                </tbody>
            </table>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</DynamicAuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/recruiter", "Recruiter Home"), ("/c1/recruiter/unregistered", "Unregistered Troopers") };

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    public string IdSearch { get; set; } = "";
    public string NickSearch { get; set; } = "";

    public string DummyId {get;set;} = "";
    public string DummyNick { get; set; } = "";

    public List<Trooper> Unregistered { get; set; } = new();
    public List<Trooper> Filtered { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var claim = (await AuthStateTask).User;

            if ((await _auth.AuthorizeAsync(claim, "Unregistered Troopers")).Succeeded)
            {
                Unregistered = await _roster.GetUnregisteredTroopersAsync();

                await BuildFilteredList();
            }

            StateHasChanged();
        }
    }

    private async Task IdChanged(ChangeEventArgs e)
    {
        IdSearch = (string?)e.Value ?? "";

        await BuildFilteredList();
    }

    private async Task NickChanged(ChangeEventArgs e)
    {
        NickSearch = (string?)e.Value ?? "";

        await BuildFilteredList();
    }

    private Task BuildFilteredList()
    {
        Filtered = Unregistered;

        if(!string.IsNullOrWhiteSpace(IdSearch))
        {
            Filtered = Filtered.Where(x => x.Id.ToString().StartsWith(IdSearch, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if(!string.IsNullOrWhiteSpace(NickSearch))
        {
            Filtered = Filtered.Where(x => x.NickName.StartsWith(NickSearch, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();

        return Task.CompletedTask;
    }
}
