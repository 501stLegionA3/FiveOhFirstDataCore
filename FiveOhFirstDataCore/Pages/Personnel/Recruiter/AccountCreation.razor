@page "/c1/recruiter/addmember"
@implements IDisposable
@inject IAuthorizationService _auth
@inject NavigationManager _nav
@inject IRefreshRequestService _refresh
@inject INicknameComparisonService _nicks
@inject IAdvancedRefreshService _advRefresh
@inject IRosterService _roster
@inject IAlertService _alert

<DynamicAuthorizeView SectionName="New Recruit Form" Context="authContext">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <div class="row">
            <h1 class="col">New Recruit Form</h1>
        </div>
        <EditForm Model="TrooperData" Context="trooperDataContext">
            <div class="row">
                <div class="col-lg-6 col-md-12 col-sm-12 form-group @(ValidNewId ? "has-success" : "has-danger")">
                    <label for="idSetter">Birth Number</label>
                    <InputTextValid class="form-control" id="idSetter" @oninput="IdChanged" @bind-Value="IdPlaceholder" Valid="ValidNewId" />
                    <div class="valid-feedback">That Birth Number is avalible!</div>
                    <div class="invalid-feedback">That Birth Number has been taken or is invalid.</div>
                </div>
                <div class="col-lg-6 col-md-12 col-sm-12 form-group">
                    <div class="row">
                        <div class="col-md-8 col-sm-12 @(ValidNewNickname ? "has-success" : "has-danger")">
                            <label for="nicknameSetter">Nickname</label>
                            <InputTextValid class="form-control" id="nicknameSetter" @oninput="NicknameChanged" @bind-Value="DummyNickName" Valid="ValidNewNickname" />
                            <div class="valid-feedback">That Nickname is avalible!</div>
                            <div class="invalid-feedback">That Nickname has been taken or is invalid.</div>
                        </div>
                        <div class="col-md-4 col-sm-12">
                            <label for="similarNames">Similar Nicknames</label>
                            <select multiple class="form-control" id="similarNames">
                            @foreach(var nick in SimilarNicknames)
                            {
                                <option value="@nick">@nick</option>
                            }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row pb-2">
                <div class="col-lg-6 col-md-12 col-sm-12">
                    <label for="startingRole">Starting Rank</label>
                    <InputEnumSelect @bind-Value="TrooperData.StartingRank" class="form-control" id="startingRole" />
                </div>
                <div class="col-lg-6 col-md-12 col-sm-12 form-group" id="miscData"> 
                    <label for="miscData">Member Details</label>
                    <div class="input-group pb-2">                            
                        <div class="input-group-text"><InputCheckbox @bind-Value="TrooperData.Sixteen" class="form-check-input mt-0" id="overSixteen" /></div>
                        <span class="input-group-text">Over Sixteen</span>
                        <span class="input-group-text"></span>
                        <span class="input-group-text">Age</span>
                        <InputNumber @bind-Value="TrooperData.Age" class="form-control" disabled="@TrooperData.Sixteen" />
                    </div>
                    <div class="row">
                        <div class="col-md-6 col-sm-12">
                            <div class="input-group pb-2">
                                <div class="input-group-text"><InputCheckbox @bind-Value="TrooperData.ModsDownloaded" class="form-check-input mt-0" id="hasModsInstalled" /></div>
                                <span for="hasModsInstalled" class="input-group-text">Mods Installed</span>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="input-group">                            
                                <div class="input-group-text bg-danger"><InputCheckbox @bind-Value="TrooperData.PossibleTroll" class="form-check-input mt-0" id="overSixteen" /></div>
                                <span class="input-group-text bg-danger">Possible Troll</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row pb-2">
                <div class="col-lg-6 col-md-12 col-sm-12">
                    <label for="preferredRole">Preferred Role</label>
                    <InputEnumSelect @bind-Value="TrooperData.PreferredRole" class="form-control" id="preferredRole" />
                </div>
                <div class="col-lg-6 col-md-12 col-sm-12 form-group">
                    
                </div>
            </div>
            <div class="row pb-2">
                <div class="col d-grid gap-2">
                    <button class="btn btn-primary" @onclick="async (x) => await SubmitNewMember()" >Submit</button>
                </div>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</DynamicAuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/recruiter", "Recruiter Home"), ("/c1/recruiter/addmember", "Add New Trooper") };

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private HashSet<string> TakenNicknames { get; set; } = new();
    private HashSet<int> TakenIds { get; set; } = new();

    private List<string> SimilarNicknames { get; set; } = new();
    private Timer SimNickTimer { get; set; }

    private bool ValidNewId { get; set; } = false;
    private bool ValidNewNickname { get; set; } = false;

    private NewTrooperData TrooperData { get; set; } = new();

    private string DummyNickName { get; set; }
    private string IdPlaceholder { get; set; }

    private List<string> Errors { get; set; } = new();
    private string? SuccessMessage { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _refresh.RefreshRequested += RefreshMe;
            await _nicks.InitializeAsync();
            var inUse = await _roster.GetInUseUserDataAsync();

            TakenIds = inUse.Item1;
            TakenNicknames = inUse.Item2;

            SimNickTimer = new(async (x) => await GetNickSimList(), null, Timeout.InfiniteTimeSpan, Timeout.InfiniteTimeSpan);
            StateHasChanged();
        }
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    protected void IdChanged(ChangeEventArgs e)
    {
        string str = (string?)e.Value ?? "";
            if (int.TryParse(str, out int val))
            {
                if (TakenIds.Contains(val) || val == 0)
                {
                    ValidNewId = false;
                }
                else
                {
                    TrooperData.Id = val;
                    ValidNewId = true;
                }
            }
            else
            {
                ValidNewId = false;
            }

        _refresh.CallRequestRefresh();
    }

    protected void NicknameChanged(ChangeEventArgs e)
    {
        string? str = (string?)e.Value;

        if (string.IsNullOrWhiteSpace(str)
            || !str.IsAlphabetical()
            || TakenNicknames.Contains(str))
        {
            ValidNewNickname = false;
        }
        else
        {
            TrooperData.NickName = str;
            ValidNewNickname = true;
        }

        SimNickTimer.Change(TimeSpan.FromSeconds(0.5), Timeout.InfiniteTimeSpan);
        _refresh.CallRequestRefresh();
    }

    protected async Task GetNickSimList()
    {
        SimilarNicknames = await _nicks.GetPhoneticMatches(TrooperData.NickName);

        _refresh.CallRequestRefresh();
    }

    protected async Task SubmitNewMember()
    {
        var claim = (await AuthStateTask).User;

        Errors.Clear();

        if((await _auth.AuthorizeAsync(claim, "New Recruit Form")).Succeeded)
        {
            if (ValidNewId)
            {
                if (ValidNewNickname)
                {
                    var res = await _roster.RegisterTrooper(TrooperData, claim);

                    if (res.GetResult(out var token, out var errors))
                    {
                        _alert.PostAlert(this, $"New trooper added. Their Access Code is: {token}");
                        _advRefresh.CallDataReloadRequest("UserData");
                        TrooperData = new();
                    }
                    else
                    {
                        Errors.AddRange(errors);
                    }  
                }
                else
                {
                    Errors.Add("Trooper name is invalid");
                }
            }
            else
            {
                Errors.Add("Trooper ID is invalid");
            }
        }
        else
        {
            Errors.Add("You are not Authorized to submit this form.");
        }

        if(Errors.Count > 0)
            _alert.PostAlert(this, Errors);

        _refresh.CallRequestRefresh();
    }

    void IDisposable.Dispose()
    {
        _refresh.RefreshRequested -= RefreshMe;
    }
}
