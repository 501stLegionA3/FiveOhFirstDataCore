@page "/c1/recruiter/addmember"
@inject IRefreshRequestService _refresh
@inject INicknameComparisonService _nicks
@inject IRosterService _roster

<AuthorizeView Policy="RequireRecruiter" Context="authContext">
    <Authorized>
        <div class="row">
            <h1 class="col">New Recruit Form</h1>
        </div>
        <EditForm Model="TrooperData" Context="trooperDataContext">
            <div class="row">
                <div class="col-lg-6 col-md-12 col-sm-12 form-group @(ValidNewId ? "has-success" : "has-danger")">
                    <label for="idSetter">Birth Number</label>
                    <InputTextValid class="form-control" id="idSetter" @oninput="IdChanged" @bind-Value="IdPlaceholder" Valid="ValidNewId" />
                    <div class="valid-feedback">That Birth Number is avalible!</div>
                    <div class="invalid-feedback">That Birth Number has been taken or is invalid.</div>
                </div>
                <div class="col-lg-6 col-md-12 col-sm-12 form-group">
                    <div class="row">
                        <div class="col-md-8 col-sm-12 @(ValidNewNickname ? "has-success" : "has-danger")">
                            <label for="nicknameSetter">Nickname</label>
                            <InputTextValid class="form-control" id="nicknameSetter" @oninput="NicknameChanged" @bind-Value="TrooperData.NickName" Valid="ValidNewNickname" />
                            <div class="valid-feedback">That Nickname is avalible!</div>
                            <div class="invalid-feedback">That Nickname has been taken or is invalid.</div>
                        </div>
                        <div class="col-md-4 col-sm-12">
                            <label for="similarNames">Similar Nicknames</label>
                            <select multiple class="form-control" id="similarNames">
                            @foreach(var nick in SimilarNicknames)
                            {
                                <option value="@nick">@nick</option>
                            }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6 col-md-12 col-sm-12">
                    <label for="startingRole">Starting Role</label>
                    <InputEnumSelect @bind-Value="TrooperData.StartingRank" class="form-control" id="startingRole" />
                </div>
                <div class="col-lg-6 col-md-12 col-sm-12 form-group" id="miscData">
                <fieldset>    
                    <label for="miscData">Member Details</label>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="TrooperData.Sixteen" class="form-check-input" id="overSixteen" />
                            <label for="overSixteen" class="form-check-label">Over Sixteen</label>
                        </div>
                        <div class="form-check">
                            <InputCheckbox @bind-Value="TrooperData.ModsDownloaded" class="form-check-input" id="hasModsInstalled" />
                            <label for="hasModsInstalled" class="form-check-label">Mods Installed</label>
                        </div>
                </fieldset>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <button class="btn btn-block btn-primary" @onclick="async (x) => await SubmitNewMember()" >Submit</button>
                </div>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private HashSet<string> TakenNicknames { get; set; } = new();
    private HashSet<int> TakenIds { get; set; } = new();

    private List<string> SimilarNicknames { get; set; } = new();
    private Timer SimNickTimer { get; set; }

    private bool ValidNewId { get; set; } = false;
    private bool ValidNewNickname { get; set; } = false;

    private NewTrooperData TrooperData { get; set; } = new();

    private string IdPlaceholder { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _refresh.RefreshRequested += RefreshMe;
        await _nicks.InitalizeAsync();
        var inUse = await _roster.GetInUseUserDataAsync();

        TakenIds = inUse.Item1;
        TakenNicknames = inUse.Item2;

        SimNickTimer = new(async (x) => await GetNickSimList(), null, Timeout.InfiniteTimeSpan, Timeout.InfiniteTimeSpan);
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    protected void IdChanged(ChangeEventArgs e)
    {
        string str = (string?)e.Value ?? "";
        if(int.TryParse(str, out int val))
        {
            if(TakenIds.Contains(val))
            {
                ValidNewId = false;
            }
            else
            {
                TrooperData.Id = val;
                ValidNewId = true;
            }
        }
        else
        {
            ValidNewId = false;
        }

        _refresh.CallRequestRefresh();
    }

    protected void NicknameChanged(ChangeEventArgs e)
    {
        string? str = (string?)e.Value;

        if (string.IsNullOrWhiteSpace(str)
            || !str.IsAlphabetical()
            || TakenNicknames.Contains(str))
        {
            ValidNewNickname = false;
        }
        else
        {
            TrooperData.NickName = str;
            ValidNewNickname = true;
        }

        SimNickTimer.Change(TimeSpan.FromSeconds(0.5), Timeout.InfiniteTimeSpan);
        _refresh.CallRequestRefresh();
    }

    protected async Task GetNickSimList()
    {
        SimilarNicknames = await _nicks.GetPhoneticMatches(TrooperData.NickName);

        _refresh.CallRequestRefresh();
    }

    protected async Task SubmitNewMember()
    {
        
    }
}
