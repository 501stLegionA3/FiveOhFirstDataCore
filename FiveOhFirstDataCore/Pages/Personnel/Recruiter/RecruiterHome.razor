@page "/c1/recruiter"
@implements IDisposable
@inject ComponentApplicationState _state
@inject NavigationManager _nav
@inject IUpdateService _update

<AuthorizeView Policy="RequireRecruiter">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <div class="row">
            <div class="col-md-8 col-sm-12">
                <div class="row text-center">
                    <h1 class="col">Recruiting Home</h1>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <a href="/c1/recruiter/addmember" class="btn btn-block btn-primary">New Recruit Form</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <a href="/c1/recruiter/unregistered" class="btn btn-block btn-success">Unregistered Troopers</a>
                    </div>
                </div>
                @if (!Loading)
                {
                    <NoticeBoard Name="Recruiter"
                                 CSHopOverride="CShop.RecruitingStaff"
                                 AllowedAccess="AllowedAccess" />
                }
            </div>
            <div class="col-md-4 col-sm-12">
                <h3 class="text-center">Recent Activity</h3>
                @if(Changes is not null)
                {
                    Counter = 0;
                    foreach(var c in Changes)
                    {
                        if(Counter++ >= 10) break;

                        <div class="alert alert-success">
                            <b class="mb-0">[@c.RecruitedById] @c.RecruitedBy?.NickName recruited [@c.ChangedForId] @c.ChangedFor?.NickName</b>
                            <br />
                            <small>@c.ChangedOn.ToString("f")</small>
                        </div>
                    }
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/recruiter", "Recruiter Home") };
    public List<string> AllowedAccess { get; } = new() { "Lead", "Assistant", "C1" };
    public bool Loading { get; set; } = true;
    public IEnumerable<RecruitmentUpdate>? Changes { get; set; } = null;
    public int Counter { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _state.OnPersisting += OnPersisting;
        if(_state.TryTakeAsJson<IEnumerable<RecruitmentUpdate>?>(_nav.Uri.ToString(), out var data))
        {
            Changes = data;
        }
        else
        {
            Changes = await _update.GetRecruitmentChangesAsync();
        }

        Loading = false;
    }

    private Task OnPersisting()
    {
        _state.PersistAsJson(_nav.Uri.ToString(), Changes);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
        => _state.OnPersisting -= OnPersisting;
}
