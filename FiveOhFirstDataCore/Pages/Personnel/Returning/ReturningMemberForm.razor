@page "/c1/returning/returnform"
@inject IRosterService _roster

<AuthorizeView>
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Model="Trooper" Context="returningMemberFormContext">
            <div class="row">
                <div class="col form-group">
                <label for="trooperSelection">Trooper To Edit</label>
                <InputSelectSingleTrooper Troopers="AllTroopers" disabled="@IsEditing" class="form-control w-100" id="trooperSelection" @bind-Value="Trooper" />
                </div>
            </div>
            <div class="row">
                <div class="col form-group">
                    <button class="btn btn-primary btn-block" disabled="@IsEditing" @onclick="StartEdit">Edit</button>
                </div>
            </div>
            <hr />
            @if(Trooper.Id != 0 && Trooper.AccessCode is not null)
            {
            <div class="row">
                <div class="col p-4 alert alert-secondary">
                    <strong>This account has not been activated yet.</strong> Give the following code to the trooper so they can activate their account.
                    <br /> @Trooper.AccessCode
                </div>
            </div>    
            <hr />
            }
            @if (IsEditing)
            {
            <div class="form-group">
                <h4>Slot Details</h4>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperSlot">Slot</label>
                        <InputEnumSelect @bind-Value="Trooper.Slot" id="trooperSlot" class="form-control p-2" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperRole">Role</label>
                        <InputEnumSelect @bind-Value="Trooper.Role" id="trooperRole" class="form-control p-2" />
                    </div>
                </div>
            </div>
            <hr />

            }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/returning", "Returning Member Staff Home"),
        ("/c1/returning/returnform", "Returning Member Form") };

    public Trooper Trooper { get; set; } = new();
    public List<Trooper> AllTroopers {get;set;} = new();
    public bool IsEditing { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        AllTroopers = await _roster.GetArchivedTroopersAsync();
    }

    private async Task StartEdit(EventArgs e)
    {
        
    }
}
