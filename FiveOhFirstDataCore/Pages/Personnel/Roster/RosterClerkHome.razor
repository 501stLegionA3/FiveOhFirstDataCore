@page "/c1/roster"
@inject IUpdateService _update

<AuthorizeView Policy="RequireRosterClerk">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <div class="row">
            <div class="col-md-8 col-sm-12">
                <div class="row text-center">
                    <h1 class="col">Roster Clerk Home</h1>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <a href="/c1/roster/edit" class="btn btn-block btn-primary">Edit Trooper</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <a href="/c1/roster/names" class="btn btn-block btn-info">Name Change Home</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        <h3>Notices</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4 col-sm-12">
                <h3 class="text-center">Recent Activity</h3>
                @if(Updates is not null)
                {
                    Counter = 0;
                    @foreach(var update in Updates)
                    {
                        @if (Counter++ >= 10) break;

                        switch (update)
                        {
                            case CShopChange c:
                            <div class="alert alert-warning">
                                <b class="mb-0">[@c.ChangedById] @c.ChangedBy?.NickName updated C-Shops for [@c.ChangedForId] @c.ChangedFor?.NickName</b>
                                @if(c.Added != CShop.None)
                                {
                                    <div class="mb-0"><b>Added:</b>
                                    <ul>
                                    @foreach(CShop shop in (Enum.GetValues(typeof(CShop))))
                                    {
                                        if((shop & c.Added) == shop && shop != CShop.None)
                                        {
                                            <li>@shop.AsFull()</li>
                                        }
                                    }
                                    </ul>
                                    </div>
                                }
                                @if(c.Removed != CShop.None)
                                {
                                    <div class="mb-0"><b>Removed:</b>
                                    <ul>
                                    @foreach(CShop shop in (Enum.GetValues(typeof(CShop))))
                                    {
                                        if((shop & c.Removed) == shop && shop != CShop.None)
                                        {
                                            <li>@shop.AsFull()</li>
                                        }
                                    }
                                    </ul>
                                    </div>
                                }
                                <br />
                                <small>@c.ChangedOn.ToString("f")</small>
                            </div>
                            break;
                            case RankChange c:
                            <div class="alert alert-success">
                                <b class="mb-0">[@c.ChangedById] @c.ChangedBy?.NickName updated the Rank for [@c.ChangedForId] @c.ChangedFor?.NickName</b>
                                <p class="mb-0">
                                    From @c.ChangedFrom.GetRank().AsFull() to @c.ChangedTo.GetRank().AsFull()
                                </p>
                                <br />
                                <small>@c.ChangedOn.ToString("f")</small>
                            </div>
                            break;
                            case SlotChange c:
                            <div class="alert alert-success">
                                <b class="mb-0">[@c.ApprovedBy.FirstOrDefault()?.Id] @c.ApprovedBy.FirstOrDefault()?.NickName updated the Slot for [@c.ChangedForId] @c.ChangedFor?.NickName</b>
                                <ul class="mb-0">
                                    @if(c.NewSlot != c.OldSlot)
                                    {
                                        <li>Slot changed from @(c.OldSlot.AsFull() ?? "N/A") to @(c.NewSlot.AsFull() ?? "N/A")</li>
                                    }
                                    @if(c.NewRole != c.OldRole)
                                    {
                                        <li>Role changed from @(c.OldRole?.AsFull() ?? "N/A") to @(c.NewRole?.AsFull() ?? "N/A")</li>
                                    }
                                    @if(c.NewTeam != c.OldTeam)
                                    {
                                        <li>Slot changed from @(c.OldTeam?.AsFull() ?? "N/A") to @(c.NewTeam?.AsFull() ?? "N/A")</li>
                                    }
                                    @if(c.NewFlight != c.OldFlight)
                                    {
                                        <li>Slot changed from @(c.OldFlight?.AsFull() ?? "N/A") to @(c.NewFlight?.AsFull() ?? "N/A")</li>
                                    }
                                </ul>
                                <br />
                                <small>@c.ChangedOn.ToString("f")</small>
                            </div>
                            break;
                            case QualificationChange c:
                            <div class="alert alert-warning">
                                <b class="mb-0">[@c.Instructors.FirstOrDefault()?.Id] @c.Instructors.FirstOrDefault()?.NickName updated Qualifications for [@c.ChangedForId] @c.ChangedFor?.NickName</b>
                                @if(c.Added != Qualification.None)
                                {
                                    <div class="mb-0"><b>Added:</b>
                                    <ul>
                                    @foreach(Qualification shop in (Enum.GetValues(typeof(Qualification))))
                                    {
                                        if((shop & c.Added) == shop && shop != Qualification.None)
                                        {
                                            <li>@shop.AsFull()</li>
                                        }
                                    }
                                    </ul>
                                    </div>
                                }
                                @if(c.Removed != Qualification.None)
                                {
                                    <div class="mb-0"><b>Removed:</b>
                                    <ul>
                                    @foreach(Qualification shop in (Enum.GetValues(typeof(Qualification))))
                                    {
                                        if((shop & c.Removed) == shop && shop != Qualification.None)
                                        {
                                            <li>@shop.AsFull()</li>
                                        }
                                    }
                                    </ul>
                                    </div>
                                }
                                <br />
                                <small>@c.ChangedOn.ToString("f")</small>
                            </div>
                            break;
                        }
                    }
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/roster", "Roster Staff Home") };
    private IEnumerable<UpdateBase>? Updates { get; set; } = null;
    private int Counter { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Updates = await _update.GetRosterUpdatesAsync();
    }
}
