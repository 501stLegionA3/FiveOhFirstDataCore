@page "/c1/roster"
@inject IUpdateService _update

<AuthorizeView Policy="RequireRosterClerk">
    <Authorized>
        <div class="row">
            <div class="col-md-8 col-sm-12">
                <div class="row text-center">
                    <h1 class="col">Roster Clerk Home</h1>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <a href="/c1/roster/edit" class="btn btn-block btn-primary">Edit Trooper</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        <h3>Notices</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-4 col-sm-12">
                <h3 class="text-center">Recent Activity</h3>
                @for(int i = 0; i < 10 && i < Updates.Count; i++)
                {
                    switch (Updates[i])
                    {
                        case CShopChange c:
                        
                        break;
                        case RankChange c:
                        
                        break;
                        case SlotChange c:
                        
                        break;
                        case QualificationChange c:
                        
                        break;
                    }
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<UpdateBase> Updates { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Updates = await _update.GetRosterUpdatesAsync();
        Updates.Sort((x, y) => y.ChangedOn.CompareTo(x.ChangedOn));
    }
}
