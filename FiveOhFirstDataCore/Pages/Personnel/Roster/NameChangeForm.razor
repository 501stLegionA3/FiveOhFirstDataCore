@page "/c1/roster/names/change"
@implements IDisposable
@inject ComponentApplicationState _state
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject INicknameComparisonService _nicks
@inject NavigationManager _nav
@inject IRefreshRequestService _refresh

<AuthorizeView Policy="RequireNameChange">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Context="nameChangeContext" Model="Trooper">
            @if(Message is not null)
            {
            <div class="row">
                <div class="col p-3">
                    <div class="alert alert-success alert-dismissible w-100">
                        <button type="button" class="btn oi oi-x float-right" @onclick="ClearMessage"></button>
                        <strong>@Message</strong>
                    </div>
                </div>
            </div>
            }
            @if(Errors.Count > 0)
            {
            <div class="row">
                <div class="col p-3">
                    <div class="alert alert-danger alert-dismissible w-100">
                        <button type="button" class="btn oi oi-x float-right" @onclick="ClearErrors"></button>
                        <strong>Something went wrong!</strong>
                        <ul>
                        @foreach(var i in Errors)
                        {
                            <li>@i</li>
                        }
                        </ul>
                    </div>
                </div>
            </div>
            }
            <div class="row">
                <div class="col form-group">
                <label for="trooperSelection">Trooper To Edit</label>
                <InputSelectSingleTrooper Troopers="AllTroopers" disabled="@IsEditing" class="form-control w-100" id="trooperSelection" @bind-Value="Trooper" />
                </div>
            </div>
            <div class="row">
                <div class="col form-group">
                    <button class="btn btn-primary btn-block" disabled="@IsEditing" @onclick="StartEdit">Change Name</button>
                </div>
            </div>
            @if(IsEditing)
            {
            <hr />
            <div class="row">
                <div class="col text-center form-group">
                    <h4>Old Name: @OldName</h4>
                    <hr />
                    <div class="row">
                    <div class="col-md-8 col-sm-12 @(ValidNewNickname ? "has-success" : "has-danger")">
                            <label for="nicknameSetter">Nickname</label>
                            <InputTextValid class="form-control" id="nicknameSetter" @oninput="NicknameChanged" @bind-Value="Trooper.NickName" Valid="ValidNewNickname" />
                            <div class="valid-feedback">That Nickname is avalible!</div>
                            <div class="invalid-feedback">That Nickname has been taken or is invalid.</div>
                        </div>
                        <div class="col-md-4 col-sm-12">
                            <label for="similarNames">Similar Nicknames</label>
                            <select multiple class="form-control" id="similarNames">
                            @foreach(var nick in SimilarNicknames)
                            {
                                <option value="@nick">@nick</option>
                            }
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col text-center form-group">
                    <button class="btn btn-block btn-primary" type="button" @onclick="SaveChanges">Save Name Change</button>
                </div>
            </div>
            }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private bool ValidNewNickname { get; set; } = false;
    private HashSet<string> TakenNicknames { get; set; } = new();

    private List<string> SimilarNicknames { get; set; } = new();
    private Timer SimNickTimer { get; set; }

    public List<(string, string)> Urls { get; set; } = new()
    {
        ("/", "Home"),
        ("/c1", "C-1 PERSONNEL"),
        ("/c1/roster", "Roster Staff Home"),
        ("/c1/roster/names", "Name Change Home"),
        ("/c1/roster/names/change", "Name Change Form")
    };

    public List<Trooper> AllTroopers { get; set; } = new();
    public Trooper Trooper { get; set; } = new();

    protected int ToEdit { get; set; } = 0;
    [CascadingParameter]
    public Trooper? CurrentUser { get; set; } = new();

    private bool IsEditing { get; set; } = false;
    private List<string> Errors {get;set;} = new();

    public string? Message { get; set; } = null;

    private string OldName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStateTask).User;
        _state.OnPersisting += OnPersisting;

        if(_state.TryTakeAsJson<bool>("editing", out var isEditing)
            && _state.TryTakeAsJson<int>("to_edit", out var toEdit))
        {
            IsEditing = isEditing;
            ToEdit = toEdit;
        }
        else
        {
            if((await _auth.AuthorizeAsync(user, "RequireNameChange")).Succeeded)
            {
                if(QueryHelpers.ParseQuery(_nav.ToAbsoluteUri(_nav.Uri).Query)
                    .TryGetValue("edit", out var edit))
                {
                    if(int.TryParse(edit, out int val))
                    {
                        IsEditing = true;
                        ToEdit = val;
                    }
                }
            }
        }
        
        SimNickTimer = new(async (x) => await GetNickSimList(), null, Timeout.InfiniteTimeSpan, Timeout.InfiniteTimeSpan);

        _refresh.RefreshRequested += RefreshMe;
    }

    protected void NicknameChanged(ChangeEventArgs e)
    {
        string? str = (string?)e.Value;

        if (string.IsNullOrWhiteSpace(str)
            || !str.IsAlphabetical()
            || TakenNicknames.Contains(str))
        {
            ValidNewNickname = false;
        }
        else
        {
            Trooper.NickName = str;
            ValidNewNickname = true;
        }

        SimNickTimer.Change(TimeSpan.FromSeconds(0.5), Timeout.InfiniteTimeSpan);
        _refresh.CallRequestRefresh();
    }

    private Task OnPersisting()
    {
        _state.PersistAsJson("editing", IsEditing);
        _state.PersistAsJson("to_edit", ToEdit);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            AllTroopers = await _roster.GetAllTroopersAsync();

            if (IsEditing)
            {
                var first = AllTroopers.FirstOrDefault(x => x.Id == ToEdit);
                if (first is not null)
                {
                    Trooper = first;
                }
            }

            if (Trooper is null)
                IsEditing = false;

            _refresh.CallRequestRefresh();
        }
    }    

    protected async Task GetNickSimList()
    {
        SimilarNicknames = await _nicks.GetPhoneticMatches(Trooper.NickName);

        _refresh.CallRequestRefresh();
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void ClearErrors(EventArgs e)
    {
        Errors.Clear();
        _refresh.CallRequestRefresh();
    }

    private void ClearMessage(EventArgs e)
    {
        Message = null;
        _refresh.CallRequestRefresh();
    }

    protected async Task StartEdit(EventArgs e)
    {
        if(Trooper is not null && Trooper.Id != 0)
        {
            IsEditing = true;
            OldName = Trooper.NickName;
        }

        var inUse = await _roster.GetInUseUserDataAsync();
        TakenNicknames = inUse.Item2;

        await _nicks.InitializeAsync();
    }

    protected async Task SaveChanges(EventArgs e)
    {
        Errors.Clear();

        if(CurrentUser is not null && CurrentUser.Id != 0)
        {
            var res = await _roster.UpdateNickNameAsync(Trooper, CurrentUser.Id);

            if(!res.GetResult(out var errors))
            {
                Errors = errors;
            }
            
            IsEditing = false;
            Trooper = new();
            Message = "Name changed successfully.";
        }
        else
        {
            Errors.Add("The current user is invalid");
        }

        _refresh.CallRequestRefresh();
    }

    void IDisposable.Dispose()
    {
        _state.OnPersisting -= OnPersisting;
        _refresh.RefreshRequested -= RefreshMe;
    }
}
