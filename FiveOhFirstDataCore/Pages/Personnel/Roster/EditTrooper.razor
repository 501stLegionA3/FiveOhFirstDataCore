@page "/c1/roster/edit"
@implements IDisposable
@inject ComponentApplicationState _state
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject NavigationManager _nav
@inject IRefreshRequestService _refresh

<AuthorizeView Policy="RequireRosterClerkOrReturningMemberStaff">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <EditForm Context="editTrooperContext" class="form" Model="Trooper">
            @if(Errors.Count > 0)
            {
            <div class="row">
                <div class="col p-3">
                    <div class="alert alert-danger alert-dismissible w-100">
                        <button type="button" class="btn oi oi-x float-right" @onclick="ClearErrors"></button>
                        <strong>Something went wrong!</strong>
                        <ul>
                        @foreach(var i in Errors)
                        {
                            <li>@i</li>
                        }
                        </ul>
                    </div>
                </div>
            </div>
            }
            <div class="row">
                <div class="col form-group">
                <label for="trooperSelection">Trooper To Edit</label>
                <InputSelectSingleTrooper Troopers="AllTroopers" disabled="@IsEditing" class="form-control w-100" id="trooperSelection" @bind-Value="Trooper" />
                </div>
            </div>
            <div class="row">
                <div class="col form-group">
                    <button class="btn btn-primary btn-block" disabled="@IsEditing" @onclick="StartEdit">Edit</button>
                </div>
            </div>
            @if (IsEditing)
            {
                @if(Trooper.Id != 0 && Trooper.AccessCode is not null)
            {
                <hr />
                <div class="row">
                    <div class="col p-1 w-100 text-center">
                        <span class="p-4 alert-secondary"><strong>This user has not registered their account.</strong> Give them the following code so they can register: @Trooper.AccessCode</span>
                    </div>
                </div>
            }
            <hr />
            <div class="form-group">
                <h4>Slot Details</h4>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperSlot">Slot</label>
                        <InputEnumSelect @bind-Value="Trooper.Slot" id="trooperSlot" class="form-control p-2" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperRole">Role</label>
                        <InputEnumSelect @bind-Value="Trooper.Role" id="trooperRole" class="form-control p-2" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperTeam">Team</label>
                        <InputEnumSelect @bind-Value="Trooper.Team" id="trooperTeam" class="form-control p-2" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="trooperFlight">Flight</label>
                        <InputEnumSelect @bind-Value="Trooper.Flight" id="trooperFlight" class="form-control p-2" />
                    </div>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <h4>Rank Details</h4>
                <div class="row">
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperRank">Trooper Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.Rank" id="trooperRank" class="form-control p-2" />
                    </div>
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperRTORank">RTO Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.RTORank" id="trooperRTORank" class="form-control p-2" />
                    </div>
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperMedicRank">Medic Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.MedicRank" id="trooperMedicRank" class="form-control p-2" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperPilotRank">Pilot Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.PilotRank" id="trooperPilotRank" class="form-control p-2" />
                    </div>
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperWardenRank">Warden Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.WardenRank" id="trooperWardenRank" class="form-control p-2" />
                    </div>
                    <div class="col-lg-4 col-md-12 p-2">
                        <label for="trooperWarrantRank">Warrant Rank</label>
                        <InputEnumSelect @bind-Value="Trooper.WarrantRank" id="trooperWarrantRank" class="form-control p-2" />
                    </div>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <h4>Qualification and CShop Management</h4>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-4">
                        <label for="trooperQualifications">Qualifications</label>
                        <InputQualificationFlagSelect @bind-Value="Trooper.Qualifications" id="trooperQualifications" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-4">
                        <label for="trooperUpperCShops">Upper Level CShops</label>
                        <InputCShopFlagSelect @bind-Value="Trooper.CShops" id="trooperUpperCShops" />
                    </div>
                </div>
            </div>
            @if(Trooper.CShops != CShop.None)
            {
                @foreach(CShop shop in Enum.GetValues(typeof(CShop)))
                {
                    @if((shop & Trooper.CShops) == shop && shop != CShop.None)
                    {
                        <div class="form-group">
                        <h5>@shop.AsFull() Details</h5>
                        @if(CShopClaims.TryGetValue(shop, out var claims))
                        {
                            @for(int i = 0; i < claims.Count; i++)
                            {
                                    int local = i;
                                    CShop localShop = shop;
                            <div class="row p-2">
                                <div class="col-lg-5 col-md-12 p-2">
                                    <InputSelect class="form-control" @bind-Value="CShopClaims[localShop][local].Key" >
                                    @foreach(var item in CShopExtensions.ClaimsTree[localShop].Keys)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                    </InputSelect>
                                </div>
                                <div class="col-lg-5 col-md-12 p-2">
                                    @if (!string.IsNullOrWhiteSpace(CShopClaims[localShop][local].Key))
                                    {
                                    <InputSelect class="form-control" @bind-Value="CShopClaims[localShop][local].Value" >
                                        @foreach (var item in CShopExtensions.ClaimsTree[localShop][CShopClaims[localShop][local].Key])
                                        {
                                        <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                    }
                                </div>
                                <div class="col-lg-2 col-md-12 p-2">
                                    <button class="btn btn-danger" @onclick="async (x) => await RemoveClaimGroup(localShop, local)">Remove</button>
                                </div>
                            </div>
                            }
                        }
                            <div calss="row">
                                <div class="col">
                                    <button class="btn btn-primary btn-block" @onclick="async (x) => await AddNewClaimGroup(shop)">Add New</button>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
            <hr />
            <div class="form-group align-content-center text-center">
                <h4>Trooper Timekeeping</h4>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="startOfService">Start of Service</label><br />
                        <InputDate @bind-Value="Trooper.StartOfService" class="from-control" id="startOfService" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="startOfService">Last Promotion</label><br />
                        <InputDate @bind-Value="Trooper.LastPromotion" class="from-control" id="startOfService" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="startOfService">Last Billet Change</label><br />
                        <InputDate @bind-Value="Trooper.LastBilletChange" class="from-control" id="startOfService" />
                    </div>
                    <div class="col-lg-6 col-md-12 p-2">
                        <label for="startOfService">BCT Graduation Date</label><br />
                        <InputDate @bind-Value="Trooper.GraduatedBCTOn" class="from-control" id="startOfService" />
                    </div>
                </div>
                <div class="row">
                    <div class="col p-2">
                        <label for="startOfService">UTC Graduation Date</label><br />
                        <InputDate @bind-Value="Trooper.GraduatedUTCOn" class="from-control" id="startOfService" />
                    </div>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <h4>Additional Information</h4>
                <div class="row">
                    <div class="col-lg-6 col-md-12">
                        <label for="trooperInital">Inital Training</label>
                        <InputText @bind-Value="Trooper.InitalTraining" class="form-control" id="trooperInitial" placeholder="Cycle 0 Class 0"/>
                    </div>
                    <div class="col-lg-6 col-md-12">
                        <label for="trooperUTC">UTC Class</label>
                        <InputText @bind-Value="Trooper.UTC" class="form-control" id="trooperUTC" placeholder="Alpha 0"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label for="trooperUTC">Notes</label>
                        <InputTextArea @bind-Value="Trooper.Notes" class="form-control w-100" id="trooperNotes" />
                    </div>
                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary btn-block" @onclick="async (x) => await SaveChangesAsync()">Save Changes</button>
                    </div>
                </div>
            </div>
            }
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</AuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/roster", "Roster Staff Home"), ("/c1/roster/edit", "Edit Trooper") };

    protected List<string> Errors { get; set; } = new();

    protected bool IsEditing { get; set; } = false;
    protected int ToEdit { get; set; } = 0;

    private List<Trooper> AllTroopers { get; set; } = new();

    private Trooper Trooper { get; set; } = new();

    private Dictionary<CShop, List<ClaimUpdateData>> CShopClaims { get; set; } = new();
    private List<ClaimUpdateData> RemovedClaims { get; set; } = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStateTask).User;
        _state.OnPersisting += OnPersisting;

        if(_state.TryTakeAsJson<bool>("editing", out var isEditing)
            && _state.TryTakeAsJson<int>("to_edit", out var toEdit))
        {
            IsEditing = isEditing;
            ToEdit = toEdit;
        }
        else
        {
           if((await _auth.AuthorizeAsync(user, "RequireRosterClerk")).Succeeded)
            {
                if(QueryHelpers.ParseQuery(_nav.ToAbsoluteUri(_nav.Uri).Query)
                    .TryGetValue("edit", out var edit))
                {
                    if(int.TryParse(edit, out int val))
                    {
                        IsEditing = true;
                        ToEdit = val;
                    }
                }
            } 
        }

        _refresh.RefreshRequested += RefreshMe;
    }

    private Task OnPersisting()
    {
        _state.PersistAsJson("editing", IsEditing);
        _state.PersistAsJson("to_edit", ToEdit);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            AllTroopers = await _roster.GetAllTroopersAsync();

            if(IsEditing)
            {
                var first = AllTroopers.FirstOrDefault(x => x.Id == ToEdit);
                if(first is not null)
                {
                    Trooper = first;
                    CShopClaims = await _roster.GetCShopClaimsAsync(Trooper);
                }
            }

            if (Trooper is null)
                IsEditing = false;

            _refresh.CallRequestRefresh();
        }
    }

    protected Task AddNewClaimGroup(CShop shop)
    {
        if(CShopClaims.TryGetValue(shop, out var list))
        {
            list.Add(new());
        }
        else
        {
            CShopClaims.Add(shop, new() { new() });
        }

        return Task.CompletedTask;
    }

    protected Task RemoveClaimGroup(CShop shop, int item)
    {
        if(CShopClaims.TryGetValue(shop, out var list))
        {
            var claim = list[item];
            RemovedClaims.Add(claim);
            list.Remove(claim);
        }

        return Task.CompletedTask;
    }

    protected async Task StartEdit(EventArgs e)
    {
        if(Trooper is not null && Trooper.Id != 0)
        {
            IsEditing = true;
            CShopClaims = await _roster.GetCShopClaimsAsync(Trooper);
        }
    }

    protected async Task SaveChangesAsync()
    {
        Errors.Clear();

        var user = (await AuthStateTask).User;

        if ((await _auth.AuthorizeAsync(user, "RequireRosterClerk")).Succeeded)
        {
            List<ClaimUpdateData> additions = new();
            List<ClaimUpdateData> removals = RemovedClaims;

            foreach(var pair in CShopClaims)
            {
                if((pair.Key & Trooper.CShops) == pair.Key)
                {
                    foreach (var c in pair.Value)
                        additions.Add(c);
                }
                else
                {
                    foreach (var c in pair.Value)
                        removals.Add(c);
                }
            }

            var res = await _roster.UpdateAsync(Trooper, additions, removals, user);

            if(!res.GetResult(out var errors))
            {
                Errors.AddRange(errors);
            }
            else
            {
                IsEditing = false;
                Trooper = new();
            }
        }
        else
        {
            Errors.Add("You are not authorized to complete that action.");
        }

        _refresh.CallRequestRefresh();
    }

    private void ClearErrors(EventArgs e)
    {
        Errors.Clear();
        _refresh.CallRequestRefresh();
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    void IDisposable.Dispose()
    {
        _state.OnPersisting -= OnPersisting;
        _refresh.RefreshRequested -= RefreshMe;
    }
}
