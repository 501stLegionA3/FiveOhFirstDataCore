@page "/c1/roster/names"
@implements IDisposable
@inject NavigationManager _nav
@inject IRosterService _roster
@inject IRefreshRequestService _refresh
@inject IAlertService _alert

<DynamicAuthorizeView SectionName="Name Change Home">
    <Authorized>
        <BreadcrumbsList Url="Urls" />
        <div class="row">
            <DynamicAuthorizeView SectionName="Add Name Changers Form" Context="managerContext">
                <Authorized>
                    <div class="col-lg-3 col-md-12">
                    <div class="d-grid gap-2 mx-auto">
                        @if(!Editing)
                        {
                            <button class="btn btn-primary" @onclick="EditPressed">Edit</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="SavePressed">Save</button>
                        }
                    </div>
                    </div>
                    <div class="col-lg-9 col-md-12">
                        <h4>Authorized Name Changers</h4>
                    @if(Editing)
                    {
                        <EditForm Context="allowedNameChangersContext" Model="this">                    
                            <InputSelectMultipleTrooper @bind-Value="AllowedNameChanges" class="form-control" Troopers="AllTroopers" />
                        </EditForm>
                    }
                    else
                    {
                        <b>Allowed to change names:</b>
                        foreach(var auth in AllowedNameChanges)
                        {
                        <span>@(auth.NickName + " | ")</span>
                        }
                    }
                    </div>
                </Authorized>
            </DynamicAuthorizeView>
        </div>
        <div class="row">
            <div class="col p-4 d-grid gap-2">
                <a class="btn btn-primary" href="/c1/roster/names/change">Name Change Form</a>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedMessage />
    </NotAuthorized>
</DynamicAuthorizeView>

@code {
    public List<(string, string)> Urls { get; set; } = new() { ("/", "Home"), ("/c1", "C-1 PERSONNEL"), ("/c1/roster", "Roster Staff Home"),
        ("/c1/roster/names", "Name Change Home")};

    public List<Trooper> AllTroopers { get; set; } = new();
    public List<Trooper> AllowedNameChanges { get; set; } = new();

    private bool Editing { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender && AllTroopers.Count <= 0)
        {
            AllTroopers = await _roster.GetAllTroopersAsync();
            AllowedNameChanges = await _roster.GetAllowedNameChangersAsync();
            _refresh.RefreshRequested += RefreshMe;
            _refresh.CallRequestRefresh();
        }
    }

    void IDisposable.Dispose()
    {
        _refresh.RefreshRequested -= RefreshMe;
    }

    private void RefreshMe()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void EditPressed(EventArgs e)
    {
        Editing = true;

        _refresh.CallRequestRefresh();
    }

    private async Task SavePressed(EventArgs e)
    {
        Editing = false;
        var res = await _roster.UpdateAllowedNameChangersAsync(AllowedNameChanges);

        if(!res.GetResult(out var errors))
            _alert.PostAlert(this, errors);

        _refresh.CallRequestRefresh();
    }
}
