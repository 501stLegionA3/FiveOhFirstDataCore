@page "/trooper/{TrooperId}"
@inject IRosterService _roster
@implements IDisposable
@inject ComponentApplicationState _state
@inject NavigationManager _nav

@if(Trooper is not null)
{
    if(Trooper.Id != 0)
    {
        <PublicTrooperProfile Trooper="Trooper" />
    }
    else
    {
        <em>No trooper found. Go <a href="/">home</a>.</em>
    }
}
else
{
    <em>Loading...</em>
}

@code {
    [Parameter]
    public string TrooperId { get; set; } = "";

    private Trooper? Trooper { get; set; } = null;

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _state.OnPersisting += OnPersisting;
        if(_state.TryTakeAsJson<Trooper?>(_nav.Uri.ToString(), out var data))
        {
            Trooper = data;
        }
        else
        {
            var user = (await AuthStateTask).User;

            if(int.TryParse(TrooperId, out int id))
                Trooper = await _roster.GetTrooperFromIdAsync(id);
            else if (TrooperId == "me")
                Trooper = await _roster.GetTrooperFromClaimsPrincipalAsync(user);
        }

        if (Trooper is null) Trooper = new();
    }

    private Task OnPersisting()
    {
        _state.PersistAsJson(_nav.Uri.ToString(), Trooper);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
        => _state.OnPersisting -= OnPersisting;
}
