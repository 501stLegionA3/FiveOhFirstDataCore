@page "/hailstorm"
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject IAdvancedRefreshService _advRefresh
@implements IRefreshBase

<ul class="nav nav-tabs row">
    <li class="nav-item col">
        <button class="nav-link w-100 h-100 @(Active == HailstormDisplayOption.Roster ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(HailstormDisplayOption.Roster)">Roster</button>
    </li>
    <DynamicAuthorizeView SectionName="Hailstorm Promotion Board">
        <Authorized>
            <li class="nav-item col">
                <button class="nav-link w-100 h-100 @(Active == HailstormDisplayOption.PromotionBoard ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(HailstormDisplayOption.PromotionBoard)">Promotion Board</button>
            </li>
        </Authorized>
    </DynamicAuthorizeView>
</ul>
@if(Loaded)
{
    <div class="tab-content">
        @switch(Active)
        {
            case HailstormDisplayOption.Roster:
                <table class="table table-hover table-striped">
                    <HailstormDisplay Hailstorm="Data" />
                </table>
                break;
            case HailstormDisplayOption.PromotionBoard:
                <h4>Battalion Promotion Board</h4>
                @if(Data is not null)
                {
                    <BattallionPromotionBoard Battalion="Data" Slot="0" />
                }
                else
                {
                    <em>No battalion data was found.</em>
                }
                break;
        }
    </div>
}
else
{
    <em>Loading...</em>
}

@code {
    public enum HailstormDisplayOption
    {
        Roster,
        PromotionBoard,
    }
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private HailstormDisplayOption Active { get; set; } = HailstormDisplayOption.Roster;
    private HailstormData Data { get; set; }
    private bool Loaded { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            Data = await _roster.GetHailstormDataAsync();

            Loaded = true;

            StateHasChanged();

            _advRefresh.AddDataReloadListener("Promotion_Battalion", DataReloadRequested);
        }
    }

    private void OnTypeChange(HailstormDisplayOption option)
    {
        Active = option;
        StateHasChanged();
    }

    public async Task CallRefreshRequest()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task DataReloadRequested()
    {
        Data = await _roster.GetHailstormDataAsync();

        await CallRefreshRequest();
    }

    public void Dispose()
    {
        _advRefresh.RemoveDataReloadListener(DataReloadRequested);
    }
}
