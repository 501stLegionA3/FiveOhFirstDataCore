@page "/company/{CompanyDesignation}"
@inject IRosterService _roster
@inject IAuthorizationService _auth
@inject IAdvancedRefreshService _advRefresh
@implements IRefreshBase

<ul class="nav nav-tabs row">
    <li class="nav-item col">
        <button class="nav-link w-100 h-100 @(Active == CompanyDisplayOption.Roster ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(CompanyDisplayOption.Roster)">Roster</button>
    </li>
    <DynamicAuthorizeView SectionName="Company Promotion Board" IsPage="false">
        <Authorized>
            <li class="nav-item col">
                <button class="nav-link w-100 h-100 @(Active == CompanyDisplayOption.PromotionBoard ? "active bg-primary text-light" : "")" @onclick="(x) => OnTypeChange(CompanyDisplayOption.PromotionBoard)">Promotion Board</button>
            </li>
        </Authorized>
    </DynamicAuthorizeView>
</ul>
@if(Loaded)
{
    <CascadingValue Value="Data">
        <div class="tab-content">
            @switch(Active)
            {
                case CompanyDisplayOption.Roster:
                    <table class="table table-striped table-hover">
                        @if(ZetaData is null)
                        {
                            <thead>
                                <tr class="table-dark text-light text-center">
                                    <th colspan="4">@Slot.AsFull()</th>
                                </tr>
                            </thead>
                            <CompanyDisplay Company="Data" Airborne="Airborne" Name="@CompanyName" />
                        }
                        else
                        {
                            <thead>
                                <tr class="table-dark text-light text-center">
                                    <th colspan="2">@Slot.AsFull()</th>
                                </tr>
                            </thead>
                            <ZetaDisplay Zeta="ZetaData" />
                        }
                    </table>
                    break;
                case CompanyDisplayOption.PromotionBoard:
                    <h4>@Slot.AsFull()'s Promotion Board</h4>
                    @if(Data is not null || ZetaData is not null)
                    {
                        <CompanyPromotionBoard Company="Data" Zeta="ZetaData" Slot="(int)Slot" />
                    }
                    else
                    {
                        <em>No company data was found. Make sure you are in a platoon or the provided designation is correct.</em>
                    }
                    break;
            }
        </div>
    </CascadingValue>
}
else
{
    <em>Loading...</em>
}

@code {
    public enum CompanyDisplayOption
    {
        Roster,
        PromotionBoard,
    }

    [Parameter]
    public string CompanyDesignation { get; set; } = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    private CompanyDisplayOption Active { get; set; } = CompanyDisplayOption.Roster;
    private CompanyData? Data { get; set; } = null;
    private ZetaCompanyData? ZetaData { get; set; } = null;
    private bool Loaded { get; set; } = false;
    private Slot Slot { get; set; }
    private bool Airborne { get; set; } = false;
    private string CompanyName { get; set; } = "Temp";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            var user = (await AuthStateTask).User;

            IAssignable<Trooper>? dat = null;
            if (int.TryParse(CompanyDesignation, out int id))
            {
                Slot = (Slot)id;
                dat = await _roster.GetCompanyDataAsync(Slot, (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded);
            }
            else if (CompanyDesignation == "me")
            {
                dat = await _roster.GetCompanyDataAsync(user);

                var t = await _roster.GetTrooperFromClaimsPrincipalAsync(user);
                if(t is not null)
                    Slot = (Slot)((int)t.Slot / 100 * 100);
            }

            if(dat is CompanyData d)
                Data = d;
            else if(dat is ZetaCompanyData z)
                ZetaData = z;
            
            Airborne = Slot >= Slot.AcklayCompany && Slot < Slot.Mynock;
            CompanyName = Slot.AsFull().Split(' ', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault() ?? "";
            Loaded = true;

            StateHasChanged();

            _advRefresh.AddDataReloadListener("Promotion_Company", DataReloadRequested);
        }
    }

    private void OnTypeChange(CompanyDisplayOption option)
    {
        Active = option;
        StateHasChanged();
    }

    public async Task CallRefreshRequest()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task DataReloadRequested()
    {
        var user = (await AuthStateTask).User;

        IAssignable<Trooper>? dat = null;
        if (int.TryParse(CompanyDesignation, out int id))
        {
            Slot = (Slot)id;
            dat = await _roster.GetCompanyDataAsync(Slot, (await _auth.AuthorizeAsync(user, "RequireManager")).Succeeded);
        }
        else if (CompanyDesignation == "me")
        {
            dat = await _roster.GetCompanyDataAsync(user);

            var t = await _roster.GetTrooperFromClaimsPrincipalAsync(user);
            if(t is not null)
                Slot = (Slot)((int)t.Slot / 100 * 100);
        }

        if(dat is CompanyData d)
            Data = d;
        else if(dat is ZetaCompanyData z)
            ZetaData = z;

        await CallRefreshRequest();
    }

    public void Dispose()
    {
        _advRefresh.RemoveDataReloadListener(DataReloadRequested);
    }
}
