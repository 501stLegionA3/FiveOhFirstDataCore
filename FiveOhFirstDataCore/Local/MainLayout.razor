@inherits LayoutComponentBase
@inject IRosterService _roster
@inject IAdvancedRefreshService _advRefresh
@implements IRefreshBase

<main class="page min-vh-100">
    @if (Loaded)
    {
    <CascadingValue Value="CurrentUser">
        <NavMenu />

        <div class="main">
            <div class="content px-4">
                @Body
            </div>
        </div>
    </CascadingValue>
    }
    else
    {
        <em>Loading...</em>
    }
</main>

@code {
    public Trooper? CurrentUser {get;set;} = null;
    public bool Loaded { get; set; } = false;

    private Task<Trooper?>? GetTrooperFromClaimTask { get; set; } = null;

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var claims = (await AuthStateTask).User;

        if(GetTrooperFromClaimTask is null)
            GetTrooperFromClaimTask = _roster.GetTrooperFromClaimsPrincipalAsync(claims);

        CurrentUser = await GetTrooperFromClaimTask;

        if (CurrentUser is not null)
        {
            _advRefresh.AddUserSpecificDataReloadListener(CurrentUser.Id, "UserDetails", ReloadData);
        }

        Loaded = true;
    }

    public async Task CallRefreshRequest()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async Task ReloadData()
    {
        var claims = (await AuthStateTask).User;
        
        GetTrooperFromClaimTask = _roster.GetTrooperFromClaimsPrincipalAsync(claims);

        CurrentUser = await GetTrooperFromClaimTask;

        if (CurrentUser is not null)
            _advRefresh.CallRefreshRequest("UserDetails", CurrentUser.Id);

        await CallRefreshRequest();
    }

    public void Dispose()
    {
        _advRefresh.RemoveDataReloadListener(ReloadData);
    }
}