@page "/admin/data/import"
<AuthorizationHandler ForceAdmin="true">
	<Authorized>
		<div class="grid grid-cols-3 gap-4 grid-rows-1 p-3">
			<div>
				<EditForm Model="this" class="grid grid-cols-1 grid-flow-row gap-2">
					@switch(Stage)
					{
						case ImportStage.FileSelect:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - File Select</div>

							<InputFile OnChange="LoadFile" accept=".csv" />

							<button class="button-op-success" @onclick="StartImportAsync">Start</button>
							break;
						case ImportStage.FileOptions:
							@if (ImportConfiguration is not null)
							{
								<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - File Options</div>

								<button class="button-op-danger" @onclick="GoBack">Go Back</button>

								<div class="input-group">
									<InputText @bind-Value="ImportConfiguration.StandardDelimiter" id="name" type="text" class="input-control peer" placeholder="Assignable Value Name" />
									<label for="name" class="input-label">File Delimiter</label>
								</div>

								<div class="input-group">
									<InputText @bind-Value="ImportConfiguration.MultipleValueDelimiter" id="name" type="text" class="input-control peer" placeholder="Assignable Value Name" />
									<label for="name" class="input-label">Multiple Value (Internal) Delimiter</label>
								</div>

								<div class="grid gird-cols-3 gap-2">
									<div class="justify-self-center">
										<label class="inline-flex items-center">
											<InputCheckbox @bind-Value="ImportConfiguration.CreateNewAccounts" />
											<span class="ml-2">Create New Accounts</span>
										</label>
									</div>

									<div class="justify-self-center">
										<label class="inline-flex items-center">
											<InputCheckbox @bind-Value="ImportConfiguration.UpdateExistingAccounts" />
											<span class="ml-2">Update Existing Accounts</span>
										</label>
									</div>
								</div>
								
								<div class="justify-self-center">
									<label class="inline-flex items-center">
										<InputCheckbox @bind-Value="ImportConfiguration.HasHeaderRow" />
										<span class="ml-2">Data Has Header Row</span>
									</label>
								</div>

								<button class="button-op-success" @onclick="RegisterFileOptions">Configure</button>
							}
							else
							{
								<em>An error occoured. Pelase refresh the page.</em>
							}
							break;
						case ImportStage.ColumnConfiguration:
							@if(ImportConfiguration is not null)
							{
								<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Column Configuration</div>

								<button class="button-op-danger" @onclick="GoBack">Go Back</button>

								@for(int i = 0; i < ImportConfiguration.HeaderValues.Count; i++)
								{
									var col = i;

									<div class="p-2 shadow-md border-slate-400 rounded-lg border-2 flex align-middle gap-1">
										<p class="flex-1">@ImportConfiguration.HeaderValues[col]</p>

										@if (ImportConfiguration.ValueBindings.ContainsKey(col))
										{
											<button class="flex-auto button-op-success rounded-lg" @onclick="() => EditValueBinding(col)">Edit</button>
										}
										else
										{
											<button class="flex-auto button-util-action rounded-lg" @onclick="() => AddValueBinding(col)">Add</button>
										}
									</div>
								}
							}
							else
							{
								<em>An error occoured. Pelase refresh the page.</em>
							}
							break;
						case ImportStage.Import:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Import In Progress</div>
							break;
					}
				</EditForm>
			</div>
			<div class="col-span-2">
				<div class="border-l-2 border-slate-400 pl-4 h-full">
					@if (ToEdit is not null)
					{
						<div class="grid grid-cols-1 grid-flow-row gap-2">
							<div class="border-2 border-slate-400 pt-4 p-2 rounded-lg shadow-lg">
								<EditForm Context="EditingConfigurationContext" Model="ToEdit">
									<div class="grid grid-cols-1 grid-flow-row gap-2">

										<div class="flex gap-2">
											<button class="button-util-action flex-grow" @onclick="CloseValueBinding">Close</button>
											<button class="button-op-danger material-icons-round flex-none" @onclick="DelteValueBinding">delete</button>
										</div>
										
										<hr />

										<div class="p-2 shadow-md border-slate-400 border-2 text-center">Column: @ColumnTitle</div>

										<div class="grid gird-cols-2 md:grid-cols-4 gap-2">
											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.IsUserIdIdentifier" class="input-radio" type="radio" 
														name="special_states" />
													<span class="ml-2">Column Is User IDs</span>
												</label>
											</div>

											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.IsUsernameIdentifier" class="input-radio" type="radio"
														name="special_states" />
													<span class="ml-2">Column Is Emails</span>
												</label>
											</div>
											
											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.Email" class="input-radio" type="radio"
														name="special_states" />
													<span class="ml-2">Column Is Emails</span>
												</label>
											</div>

											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.Password" class="input-radio" type="radio" 
														name="special_states" />
													<span class="ml-2">Column Is User Password Hashes</span>
												</label>
											</div>
										</div>

										@if(!ToEdit.Email && !ToEdit.IsUserIdIdentifier
											&& !ToEdit.Password && !ToEdit.IsUsernameIdentifier)
										{
											
										}

										<hr />

										<div class="flex gap-2">
											<button class="button-util-action flex-grow" @onclick="CloseValueBinding">Close</button>
											<button class="button-op-danger material-icons-round flex-none" @onclick="DelteValueBinding">delete</button>
										</div>

									</div>
								</EditForm>
							</div>
						</div>
					}
				</div>
			</div>
		</div>		
	</Authorized>
</AuthorizationHandler>