@page "/admin/data/import"

<AuthorizationHandler ForceAdmin="true">
	<Authorized>
		<div class="grid grid-cols-3 gap-4 grid-rows-1 p-3">
			<div>
				<EditForm Model="this" class="grid grid-cols-1 grid-flow-row gap-2">
					@switch(Stage)
					{
						case ImportStage.FileSelect:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - File Select</div>

							<InputFile OnChange="LoadFile" accept=".csv" />

							<button class="button-op-success" @onclick="StartImportAsync">Start</button>
							break;
						case ImportStage.FileOptions:
							@if (ImportConfiguration is not null)
							{
								<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - File Options</div>

								<button class="button-op-danger" @onclick="GoBack">Go Back</button>

								<div class="input-group">
									<InputText @bind-Value="ImportConfiguration.StandardDelimiter" id="delim" type="text" class="input-control peer" placeholder="Assignable Value Name" />
									<label for="delim" class="input-label">File Delimiter</label>
								</div>

								<div class="input-group">
									<InputText @bind-Value="ImportConfiguration.MultipleValueDelimiter" id="alt-delim" type="text" class="input-control peer" placeholder="Assignable Value Name" />
									<label for="alt-delim" class="input-label">Multiple Value (Internal) Delimiter</label>
								</div>

								<div class="grid gird-cols-3 gap-2">
									<div class="justify-self-center">
										<label class="inline-flex items-center">
											<InputCheckbox @bind-Value="ImportConfiguration.CreateNewAccounts" />
											<span class="ml-2">Create New Accounts</span>
										</label>
									</div>

									<div class="justify-self-center">
										<label class="inline-flex items-center">
											<InputCheckbox @bind-Value="ImportConfiguration.UpdateExistingAccounts" />
											<span class="ml-2">Update Existing Accounts</span>
										</label>
									</div>
								</div>
								
								<div class="justify-self-center">
									<label class="inline-flex items-center">
										<InputCheckbox @bind-Value="ImportConfiguration.HasHeaderRow" />
										<span class="ml-2">Data Has Header Row</span>
									</label>
								</div>

								<button class="button-op-success" @onclick="RegisterFileOptions">Configure</button>
							}
							else
							{
								<em>An error occoured. Pelase refresh the page.</em>
							}
							break;
						case ImportStage.ColumnConfiguration:
							@if(ImportConfiguration is not null)
							{
								<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Column Configuration</div>

								<button class="button-op-danger" @onclick="GoBack">Go Back</button>

								@for(int i = 0; i < ImportConfiguration.HeaderValues.Count; i++)
								{
									var col = i;

									var colorCode = "";
									if (ImportConfiguration.IdentifierColumn == col)
									{
										colorCode = "bg-blue-300";
									}
									else if (ImportConfiguration.EmailColumn == col)
									{
										colorCode = "bg-purple-400";
									}
									else if (ImportConfiguration.PasswordColumn == col)
									{
										colorCode = "bg-slate-300";
									}

									<div class="p-2 shadow-md border-slate-400 rounded-lg border-2 flex align-middle gap-1 @colorCode">
										<p class="flex-1">@ImportConfiguration.HeaderValues[col]</p>

										@if(ImportConfiguration.IdentifierColumn == col)
										{
											<code class="flex-1">user id</code>
										}
										else if (ImportConfiguration.EmailColumn == col)
										{
											<code class="flex-1">email</code>
										}
										else if (ImportConfiguration.PasswordColumn == col)
										{
											<code class="flex-1">password</code>
										}

										@if (ImportConfiguration.ValueBindings.ContainsKey(col))
										{
											<button class="flex-auto button-op-success rounded-lg" @onclick="() => EditValueBinding(col)">Edit</button>
										}
										else
										{
											<button class="flex-auto button-util-action rounded-lg" @onclick="() => AddValueBinding(col)">Add</button>
										}
									</div>
								}

								<hr />

								<button class="button-op-success" @onclick="ImportDataAsync">Import</button>
							}
							else
							{
								<em>An error occoured. Pelase refresh the page.</em>
							}
							break;
						case ImportStage.Errored:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Import Errored</div>

							<button class="button-op-danger" @onclick="GoBack">Go Back</button>
							break;
						case ImportStage.Import:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Import In Progress</div>
							break;
						case ImportStage.Done:
							<div class="p-2 shadow-md border-slate-400 rounded-br-lg border-2">CSV Import - Import Complete</div>
							break;
					}
				</EditForm>
			</div>
			<div class="col-span-2">
				<div class="border-l-2 border-slate-400 pl-4 h-full">
					@if (ToEdit is not null && Stage == ImportStage.ColumnConfiguration)
					{
						<div class="grid grid-cols-1 grid-flow-row gap-2">
							<div class="border-2 border-slate-400 pt-4 p-2 rounded-lg shadow-lg">
								<EditForm Context="EditingConfigurationContext" Model="ToEdit">
									<div class="grid grid-cols-1 grid-flow-row gap-2">

										<div class="flex gap-2">
											<button class="button-util-action flex-grow" @onclick="CloseValueBinding">Close</button>
											<button class="button-op-danger material-icons-round flex-none" @onclick="DeleteValueBinding">delete</button>
										</div>
										
										<hr />

										<div class="p-2 shadow-md border-slate-400 border-2 text-center">Column: @ColumnTitle</div>

										<div class="grid gird-cols-2 md:grid-cols-4 gap-2">
											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.IsUserIdIdentifier" class="input-radio" type="radio" 
														name="special_states" @onclick="ToggleUserIdIdentifier" />
													<span class="ml-2">Column Is User IDs</span>
												</label>
											</div>

											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.IsUsernameIdentifier" class="input-radio" type="radio"
														name="special_states" @onclick="ToggleUsernameIdentifier" />
													<span class="ml-2">Column Is Usernames</span>
												</label>
											</div>
											
											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.EmailIdentifier" class="input-radio" type="radio"
														name="special_states" @onclick="ToggleEmailIdentifier" />
													<span class="ml-2">Column Is Emails</span>
												</label>
											</div>

											<div class="justify-self-center">
												<label class="inline-flex items-center">
													<InputCheckbox @bind-Value="ToEdit.PasswordIdentifier" class="input-radio" type="radio" 
														name="special_states" @onclick="TogglePasswordIdentifier" />
													<span class="ml-2">Column Is User Password Hashes</span>
												</label>
											</div>
										</div>

										@if(!ToEdit.EmailIdentifier && !ToEdit.IsUserIdIdentifier
											&& !ToEdit.PasswordIdentifier && !ToEdit.IsUsernameIdentifier)
										{
											<div class="p-2 shadow-md border-slate-400 border-2 text-center">Value Configuration</div>

											<UserPropertySelector PropertyName="@ToEdit.PropertyName" User="MockTrooper"
												UseStaticProperties="ToEdit.IsStatic" SetPropertyName="(x) => { ToEdit.PropertyName = x; StateHasChanged(); }"
												SetPropertyType="(x) => { ToEdit.IsStatic = x; StateHasChanged(); }"
												AllowedStaticTypes="AllowedStaticTypes" />

											@if(!ToEdit.IsStatic)
											{
												<div class="justify-self-center">
													<label class="inline-flex items-center">
														<InputCheckbox @bind-Value="ToEdit.AutoConvert" />
														<span class="ml-2">Auto Convert Value</span>
													</label>
												</div>

												@if (!ToEdit.AutoConvert)
												{
													<div class="p-2 shadow-md border-slate-400 border-2 text-center">Manual Conversion Bindings</div>

													if((ImportConfiguration?.UniqueValues.TryGetValue(ToEditCol, out var values) ?? false)
														&& !string.IsNullOrWhiteSpace(ToEdit.PropertyName))
													{
														<div class="p-2 bg-slate-600 border rounded-lg border-slate-200 m-2 h-max flex flex-col">

															@foreach(var item in values)
															{
																var key = item;
																<div class="m-1 p-2 relative inline-flex bg-gray-400 rounded-md gap-2">
																	<p class="flex-0">@item</p>
																	@if(ToEdit.DataValueModels.TryGetValue(item, out var pair))
																	{
																		<div class="flex-grow grid grid-cols-1 gap-2">
																			<AssignableValueEditor EditModel="pair.Item1" 
																				OnUpdate="() => OnSingleValueAssignableUpdated(key)"
																				SelectedValues="pair.Item2" />

																			<hr />

																			<button class="button-op-danger material-icons-round" 
																				@onclick="() => DeleteSingleValueAssignable(key)">
																				delete
																			</button>
																		</div>
																	}
																	else
																	{
																		<button class="button-op-success flex-grow" @onclick="() => CreateSingleValueAssignable(key)">Configure</button>
																	}
																</div>
															}
														</div>
													}
												}
											}
										}

										<hr />

										<div class="flex gap-2">
											<button class="button-util-action flex-grow" @onclick="CloseValueBinding">Close</button>
											<button class="button-op-danger material-icons-round flex-none" @onclick="DeleteValueBinding">delete</button>
										</div>

									</div>
								</EditForm>
							</div>
						</div>
					}
					else if (Stage == ImportStage.Import 
						|| Stage == ImportStage.Done
						|| Stage == ImportStage.Errored)
					{
						<InternalLoggerDisplay Title="Import Log" Scope="LogScope" CancellationSource="CancellationSource" />
					}
				</div>
			</div>
		</div>		
	</Authorized>
</AuthorizationHandler>