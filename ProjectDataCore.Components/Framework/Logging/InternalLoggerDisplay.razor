<div class="p-5 bg-slate-300">
	<div class="border rounded-lg shadow-lg border-slate-100 bg-white grid grid-cols-1">
		<div class="p-2 inline-flex gap-2">
			<div class="flex-none mr-10">
				@Title
			</div>

			@switch(LoggerLevel)
			{
				case LogLevel.Debug:
					<button class="px-2 py-1 w-18 flex-grow rounded-md border border-green-300 @(ActiveScopes[LogLevel.Debug] ? "bg-green-300" : "")"
						@onclick="() => ToggleLogDisplay(LogLevel.Debug)">Debug</button>
					goto case LogLevel.Information;
				case LogLevel.Information:
					<button class="px-2 py-1 w-18 flex-grow rounded-md border border-gray-400 @(ActiveScopes[LogLevel.Information] ? "bg-gray-400" : "")"
						@onclick="() => ToggleLogDisplay(LogLevel.Information)">Info</button>
					goto case LogLevel.Warning;
				case LogLevel.Warning:
					<button class="px-2 py-1 w-18 flex-grow rounded-md border border-yellow-400 @(ActiveScopes[LogLevel.Warning] ? "bg-yellow-400" : "")"
						@onclick="() => ToggleLogDisplay(LogLevel.Warning)">Warn</button>
					goto case LogLevel.Error;
				case LogLevel.Error:
					<button class="px-2 py-1 w-18 flex-grow rounded-md border border-red-400 @(ActiveScopes[LogLevel.Error] ? "bg-red-400" : "")"
						@onclick="() => ToggleLogDisplay(LogLevel.Error)">Error</button>
					goto case LogLevel.Critical;
				case LogLevel.Critical:
					<button class="px-2 py-1 w-18 flex-grow rounded-md border border-red-800 @(ActiveScopes[LogLevel.Critical] ? "bg-red-800" : "")"
						@onclick="() => ToggleLogDisplay(LogLevel.Critical)">Critical</button>
					break;
			}

			@if (CancellationSource is not null)
			{
				<div class="flex-none border border-black"></div>
				<button class="flex-grow rounded-md bg-black text-white px-2 py-1" @onclick="() => CancellationSource.Cancel()">Abort</button>
			}
		</div>
		<hr />
		<div class="flex flex-col-reverse h-96 overflow-auto">
			<div class="p-2 bg-slate-600 border rounded-lg border-slate-200 m-2 h-max flex flex-col">
				@foreach(var log in Logs)
				{
					if (ActiveScopes.TryGetValue(log.LogLevel, out var level) && level)
					{
						switch (log.LogLevel)
						{
							case LogLevel.Debug:
								<LogDebugMessage Message="@log.Message" Date="log.LastEdit" Depth="log.Depth" />
								break;
							case LogLevel.Information:
								<LogInfoMessage Message="@log.Message" Date="log.LastEdit" Depth="log.Depth" />
								break;
							case LogLevel.Warning:
								<LogWarningMessage Message="@log.Message" Date="log.LastEdit" Depth="log.Depth" />
								break;
							case LogLevel.Error:
								<LogErrorMessage Message="@log.Message" Date="log.LastEdit" Depth="log.Depth" />
								break;
							case LogLevel.Critical:
								<LogCriticalMessage Message="@log.Message" Date="log.LastEdit" Depth="log.Depth" />
								break;
						}
					}
				}
			</div>
		</div>
	</div>
</div>
