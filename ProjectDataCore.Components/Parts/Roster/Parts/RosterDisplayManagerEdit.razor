@if (RosterComponentSettings is not null)
{
	<EditForm Context="RosterDisplaySettingsContext" Model="RosterComponentSettings"
		class="grid grid-cols-1 p-2 w-full gap-2">
		<label class="inline-flex items-center">
			Relative Roster
			<InputCheckbox class="mr-2" @bind-Value="RosterComponentSettings.Scoped" />
		</label>
		@if (RosterComponentSettings.Scoped)
		{
			<label>Level From Top (To Display)</label>
			<InputNumber @bind-Value="RosterComponentSettings.LevelFromTop" />

			<label>Display Depth</label>
			<InputNumber @bind-Value="RosterComponentSettings.Depth" />
		}
		
		<hr />

		<label class="inline-flex items-center">
			Allow User Listing
			<InputCheckbox class="mr-2" @bind-Value="RosterComponentSettings.AllowUserListing" />
		</label>
		@if(RosterComponentSettings.AllowUserListing)
		{
			<div class="grid grid-cols-1 gap-2">
				<div class="grid grid-cols-2 gap-2 text-center">
					<UserPropertySelector User="ActiveUser" AllowedStaticTypes="RosterComponentSettings.ULPE_AllowedStatic"
						PropertyName="@RosterComponentSettings.ULPE_PropertyName" SetPropertyName="RosterComponentSettings.ULPE_ProeprtyNameChanged"
						UseStaticProperties="RosterComponentSettings.ULPE_Static" SetPropertyType="RosterComponentSettings.ULPE_StaticChanged" />
					<button class="border border-blue-700 hover:text-white hover:bg-blue-700" 
						@onclick="async () => await RosterComponentSettings.ULPE_AddProperty(OnRefreshRequested)">
						Add Property
					</button>
				</div>
				<table class="table-auto mb-10">
					<thead>
						<tr class="border border-black bg-gray-300">
							@for(int i = 0; i < RosterComponentSettings.UserListingProperties.Count; i++)
							{
								<th class="p-2 relative @(i + 1 != RosterComponentSettings.UserListingProperties.Count ? "border-gray-700 border-r-2" : "")">
									@RosterComponentSettings.UserListingProperties[i].PropertyName;
								</th>
							}
						</tr>
					</thead>
				</table>
			</div>
		}
	</EditForm>
}